#pragma checksum "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Administration\User.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1340d54bdf9070674a1e6c018846c12e515db67d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Administration_User), @"mvc.1.0.view", @"/Views/Administration/User.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1340d54bdf9070674a1e6c018846c12e515db67d", @"/Views/Administration/User.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"804fc8bd0ed383ec8f2a14309e921cbb1975ce29", @"/Views/_ViewImports.cshtml")]
    public class Views_Administration_User : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("plr20"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Administration\User.cshtml"
  
    ViewData["Title"] = "User";

#line default
#line hidden
#nullable disable
            DefineSection("Styles", async() => {
                WriteLiteral(@"
    <style>
        .el-badge__content.is-fixed {
            top: 10px;
            right: 0;
        }

        #pane-first .el-form-item .el-form-item__label {
            min-width: 100px;
            text-align: left;
        }

        #pane-first .el-form-item .el-input--suffix {
            margin-bottom: 5px;
        }
    </style>
");
            }
            );
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1340d54bdf9070674a1e6c018846c12e515db67d4122", async() => {
                WriteLiteral(@"
    <div id=""userlist"">
        <template>
            <!-- 标题和地址 -->
            <el-row>
                <el-col :span=""24"" class=""breadcrumb-container"">
                    <el-breadcrumb separator=""/"">
                        <el-breadcrumb-item><strong>系统管理</strong></el-breadcrumb-item>
                        <el-breadcrumb-item>用户管理</el-breadcrumb-item>
                    </el-breadcrumb>
                </el-col>
            </el-row>
            <!--工具条-->
            <el-col :span=""24"" class=""toolbar"">
                <el-form :inline=""true"" size=""small"" :model=""filters"">
                    <el-form-item>
                        <el-input placeholder=""登录名"" v-model=""filters.searchKey""></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button icon=""el-icon-search"" v-on:click=""search"">查询</el-button>
                    </el-form-item>
                    <el-form-item>
                        <el-button type=""primary"" ");
                WriteLiteral(@"icon=""el-icon-plus"" v-on:click=""create"">新增</el-button>
                    </el-form-item>
                </el-form>
            </el-col>
        </template>
        <!-- 列表 -->
        <el-table v-loading=""listLoading"" size=""small"" :data=""userlist"">
            <el-table-column prop=""id"" label=""ID"" width=""100"">
            </el-table-column>
            <el-table-column prop=""loginName"" label=""登录名"" width=""200"">
            </el-table-column>
            <el-table-column label=""姓名"" width=""200"">
                <template slot-scope=""scope"">
                    {{ scope.row.fullName }}
                </template>
            </el-table-column>
            <el-table-column prop=""emailAddress"" label=""邮箱"" width=""200"">
            </el-table-column>
            <el-table-column label=""状态"" width=""100"">
                <template slot-scope=""scope"">
                    <el-tag size=""small"" type=""info"" v-if=""scope.row.status==0"">初始</el-tag>
                    <el-tag size=""small"" type=""success"" ");
                WriteLiteral(@"v-else-if=""scope.row.status==1"">激活</el-tag>
                    <el-tag size=""small"" type=""danger"" v-else>冻结</el-tag>
                </template>
            </el-table-column>
            <el-table-column label=""操作"" min-width=""120"" fixed=""right"">
                <template slot-scope=""scope"">
                    <el-dropdown trigger=""click"" size=""small"">
                        <el-button size=""small"" class=""waves-effect"">
                            操作
                            <i class=""el-icon-caret-bottom el-icon--right""></i>
                        </el-button>
                        <el-dropdown-menu slot=""dropdown"">
                            <el-dropdown-item");
                BeginWriteAttribute("v-if", " v-if=\"", 3180, "\"", 3187, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                <div v-on:click=\"edit(scope.row.id)\">编 辑</div>\r\n                            </el-dropdown-item>\r\n                            <el-dropdown-item");
                BeginWriteAttribute("v-if", " v-if=\"", 3365, "\"", 3372, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                <div v-on:click=\"openUpdateRoleDialog(scope.row.id)\">编辑角色</div>\r\n                            </el-dropdown-item>\r\n                            <el-dropdown-item");
                BeginWriteAttribute("v-if", " v-if=\"", 3567, "\"", 3574, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                <div v-on:click=\"openUpdatePlatDialog(scope.row.id)\">编辑平台</div>\r\n                            </el-dropdown-item>\r\n                            <el-dropdown-item");
                BeginWriteAttribute("v-if", " v-if=\"", 3769, "\"", 3776, 0);
                EndWriteAttribute();
                WriteLiteral(@">
                                <div v-on:click=""openUpdateSystemDialog(scope.row.id)"">编辑系统</div>
                            </el-dropdown-item>
                            <el-dropdown-item v-if=""scope.row.status!=1"">
                                <div v-on:click=""modifyStatus(scope.row,1)"">激 活</div>
                            </el-dropdown-item>
                            <el-dropdown-item v-if=""scope.row.status!=2"">
                                <div v-on:click=""modifyStatus(scope.row,2)"">冻 结</div>
                            </el-dropdown-item>
                            <el-dropdown-item>
                                <div v-on:click=""editUserPassword(scope.row.id)"">修改密码</div>
                            </el-dropdown-item>
                            <el-dropdown-item>
                                <div v-on:click=""deleteUser(scope.row)"">删 除</div>
                            </el-dropdown-item>
                        </el-dropdown-menu>
                    </el-dropdown>
");
                WriteLiteral(@"                </template>
            </el-table-column>
        </el-table>
        <!--分页-->
        <el-col :span=""24"" class=""toolbar"">
            <el-pagination v-on:size-change=""handleSizeChange"" v-on:current-change=""handleCurrentChange"" :current-page=""filters.currentPage"" :page-sizes=""[10,20,30,40,50]"" :page-size=""filters.pageSize"" layout=""total, sizes, prev, pager, next, jumper"" :total=""total"" style=""float:right;"">
            </el-pagination>
        </el-col>
        <template>
            <!--// 添加用户编辑的弹出框-->
            <el-dialog :title=""dialogcreateorUpdateUser.title""
                       :visible.sync=""dialogcreateorUpdateUser.isShow""
                       size=""tiny"">
                <el-tabs ref=""tab"" v-model=""activeName"">
                    <el-tab-pane label=""用户信息"" name=""first"">
                        <el-form :rules=""rules"" size=""small"" :model=""dialogcreateorUpdateUser.User"" ref=""UserFrom"">
                            <el-form-item label=""loginName"" prop=""loginName"" ");
                WriteLiteral(@"style=""width:49%;float: left"">
                                <el-input placeholder=""loginName"" v-model=""dialogcreateorUpdateUser.User.loginName"" style=""width:auto;""></el-input>
                            </el-form-item>
                            <el-form-item label=""firstName"" prop=""firstName"" style=""width:49%;float: left"">
                                <el-input placeholder=""firstName"" v-model=""dialogcreateorUpdateUser.User.firstName"" style=""width:auto;""></el-input>
                            </el-form-item>

                            <el-form-item label=""lastName"" prop=""lastName"" style=""width:49%;float: left"">
                                <el-input placeholder=""lastName"" v-model=""dialogcreateorUpdateUser.User.lastName"" style=""width:auto;""></el-input>
                            </el-form-item>
                            <el-form-item label=""emailAddress"" prop=""emailAddress"" style=""width:49%;float: left"">
                                <el-input placeholder=""emailAddress"" v-model=""d");
                WriteLiteral(@"ialogcreateorUpdateUser.User.emailAddress"" style=""width:auto;""></el-input>
                            </el-form-item>
                            <el-form-item label=""sex"" prop=""sex"" style=""width:49%;float: left"">
                                <div style=""float:left;width:auto;"">
                                    <el-radio v-model=""dialogcreateorUpdateUser.User.sex"" label=""m"">男性</el-radio>
                                    <el-radio v-model=""dialogcreateorUpdateUser.User.sex"" label=""f"">女性</el-radio>
                                    <el-radio v-model=""dialogcreateorUpdateUser.User.sex"" label=""u"">未知</el-radio>
                                </div>
                            </el-form-item>
                            <el-form-item label=""mobile"" style=""width:49%;float: left"">
                                <el-input placeholder=""mobile"" v-model=""dialogcreateorUpdateUser.User.mobile"" style=""width:auto;""></el-input>
                            </el-form-item>
                            <");
                WriteLiteral(@"el-form-item label=""telephone"" style=""width:49%;float: left"">
                                <el-input placeholder=""telephone"" v-model=""dialogcreateorUpdateUser.User.telephone"" style=""width:auto;""></el-input>
                            </el-form-item>
                            <el-form-item label=""fax"" style=""width:49%;float: left"">
                                <el-input placeholder=""fax"" v-model=""dialogcreateorUpdateUser.User.fax"" style=""width:auto;""></el-input>
                            </el-form-item>
                            <el-form-item label=""wechat"" style=""width:49%;float: left"">
                                <el-input placeholder=""wechat"" v-model=""dialogcreateorUpdateUser.User.wechat"" style=""width:auto;""></el-input>
                            </el-form-item>
                            <el-form-item label=""password"" v-if=""dialogcreateorUpdateUser.User.id==0"" prop=""password"" style=""width:49%;float: left"">
                                <el-input type=""password"" placeholder=""p");
                WriteLiteral(@"assword"" v-model=""dialogcreateorUpdateUser.User.password"" style=""width:auto;""></el-input>
                            </el-form-item>
                            <el-form-item label=""passwordRepeat"" v-if=""dialogcreateorUpdateUser.User.id==0"" prop=""passwordRepeat"" style=""width:49%;float: left"">
                                <el-input type=""password"" placeholder=""passwordRepeat"" v-model=""dialogcreateorUpdateUser.User.passwordRepeat"" style=""width:auto;""></el-input>
                            </el-form-item>
                        </el-form>
                    </el-tab-pane>
                </el-tabs>
                <span slot=""footer"" class=""dialog-footer"">
                    <el-button size=""small"" v-on:click=""dialogcreateorUpdateUser.isShow = false"">取 消</el-button>
                    <el-button size=""small"" type=""primary"" v-on:click=""saveUser"">保 存</el-button>
                </span>
            </el-dialog>
        </template>
        <!--角色管理-->
        <template>
            <el-dialo");
                WriteLiteral(@"g :title=""dialogUpdateUserRole.title""
                       :visible.sync=""dialogUpdateUserRole.isShow""
                       size=""tiny"">
                <el-tabs ref=""tab"" v-model=""activeName"" v-loading=""dialogLoading"">
                    <el-tab-pane name=""first"">
                        <span slot=""label"">
                            <el-badge :value=""dialogUpdateUserRole.assignedRoleCount"" class=""mark"">角色</el-badge>
                        </span>
                        <el-checkbox-group v-model=""dialogUpdateUserRole.checkIds"" v-on:change=""handleCheckedRolesChange"">
                            <el-checkbox v-for=""item in dialogUpdateUserRole.roles"" :key=""item.id"" :label=""item.id"">
                                {{item.name}}
                            </el-checkbox>
                        </el-checkbox-group>
                    </el-tab-pane>
                </el-tabs>
                <span slot=""footer"" class=""dialog-footer"">
                    <el-button size=""small"" v-on:clic");
                WriteLiteral(@"k=""dialogUpdateUserRole.isShow = false"">取 消</el-button>
                    <el-button size=""small"" type=""primary"" v-on:click=""saveRole"">保 存</el-button>
                </span>
            </el-dialog>
        </template>
        <!--平台管理-->
        <template>
            <el-dialog :title=""dialogUpdateUserPlatform.title""
                       :visible.sync=""dialogUpdateUserPlatform.isShow""
                       size=""tiny"">
                <el-tabs ref=""tab"" v-model=""activeName"" v-loading=""dialogLoading"">
                    <el-tab-pane name=""first"">
                        <span slot=""label"">
                            <el-badge :value=""dialogUpdateUserPlatform.assignedPlatformCount"" class=""mark"">平台权限</el-badge>
                        </span>
                        <el-checkbox-group v-model=""dialogUpdateUserPlatform.checkIds"" v-on:change=""handleCheckedPlatformChange"">
                            <el-checkbox v-for=""item in dialogUpdateUserPlatform.platforms"" :key=""item.id"" :label=""ite");
                WriteLiteral(@"m.id"">
                                {{item.eName}}
                            </el-checkbox>
                        </el-checkbox-group>
                    </el-tab-pane>
                </el-tabs>
                <span slot=""footer"" class=""dialog-footer"">
                    <el-button size=""small"" v-on:click=""dialogUpdateUserPlatform.isShow = false"">取 消</el-button>
                    <el-button size=""small"" type=""primary"" v-on:click=""savePlatform"">保 存</el-button>
                </span>
            </el-dialog>
        </template>
        <!--系统管理-->
        <template>
            <el-dialog :title=""dialogUpdateUserSystem.title""
                       :visible.sync=""dialogUpdateUserSystem.isShow""
                       size=""tiny"">
                <el-tabs ref=""tab"" v-model=""activeName"" v-loading=""dialogLoading"">
                    <el-tab-pane name=""first"">
                        <span slot=""label"">
                            <el-badge :value=""dialogUpdateUserSystem.assignedSy");
                WriteLiteral(@"stemCount"" class=""mark"">系统权限</el-badge>
                        </span>
                        <el-checkbox-group v-model=""dialogUpdateUserSystem.checkIds"" v-on:change=""handleCheckedSystemChange"">
                            <el-checkbox v-for=""item in dialogUpdateUserSystem.systems"" :key=""item.id"" :label=""item.id"">
                                {{item.displayName}}
                            </el-checkbox>
                        </el-checkbox-group>
                    </el-tab-pane>
                </el-tabs>
                <span slot=""footer"" class=""dialog-footer"">
                    <el-button size=""small"" v-on:click=""dialogUpdateUserSystem.isShow = false"">取 消</el-button>
                    <el-button size=""small"" type=""primary"" v-on:click=""saveSystem"">保 存</el-button>
                </span>
            </el-dialog>
        </template>
");
                WriteLiteral(@"        <template>
            <el-dialog title=""修改密码""
                       :visible.sync=""dialogPwd.isShow""
                       size=""tiny"">
                <el-form :model=""dialogPwd"" size=""small"" :rules=""rules"" ref=""passwordform"" label-width=""120px"">
                    <el-form-item label=""新密码"" prop=""newPassword"">
                        <el-input type=""password"" v-model=""dialogPwd.newPassword"" placeholder=""新密码""></el-input>
                    </el-form-item>
                    <el-form-item label=""新密码 (核对)"" prop=""newPasswordRepeat"">
                        <el-input type=""password"" v-model=""dialogPwd.newPasswordRepeat"" placeholder=""新密码 (核对)""></el-input>
                    </el-form-item>
                </el-form>
                <span slot=""footer"" class=""dialog-footer"">
                    <el-button size=""small"" v-on:click=""dialogPwd.isShow = false"">取 消</el-button>
                    <el-button size=""small"" type=""primary"" v-on:click=""saveUserPassword"">保 存</el-button>
           ");
                WriteLiteral("     </span>\r\n            </el-dialog>\r\n        </template>\r\n    </div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        var Main = {
            data() {
                var validatePass = (rule, value, callback) => {
                    if (value == '' || value == null) {
                        callback(new Error('请输入密码'));
                    } else {
                        if (this.dialogcreateorUpdateUser.User.passwordRepeat !== '') {
                            this.$refs.UserFrom.validateField('passwordRepeat');
                        }
                        callback();
                    }
                };
                var validatePass2 = (rule, value, callback) => {
                    if (value == '' || value == null) {
                        callback(new Error('请再次输入密码'));
                    } else if (value !== this.dialogcreateorUpdateUser.User.password) {
                        callback(new Error('两次输入密码不一致!'));
                    } else {
                        callback();
                    }
                };
                var validatePass3 = (rul");
                WriteLiteral(@"e, value, callback) => {
                    if (value == '' || value == null) {
                        callback(new Error('请输入密码'));
                    } else {
                        if (this.dialogPwd.newPasswordRepeat != '') {
                            this.$refs.passwordform.validateField('newPasswordRepeat');
                        }
                        callback();
                    }
                };
                var validatePass4 = (rule, value, callback) => {
                    if (value == '' || value == null) {
                        callback(new Error('请再次输入密码'));
                    } else if (value !== this.dialogPwd.newPassword) {
                        callback(new Error('两次输入密码不一致!'));
                    } else {
                        callback();
                    }
                };
                return {
                    /*==表格数据==*/
                    userlist: [],
                    filters: {
                        searchKey: '',
");
                WriteLiteral(@"                        isChanged: 0,
                        pageSize: 10,
                        currentPage: 1,

                    },
                    total: 30,
                    page: 1,
                    listLoading: false,
                    dialogLoading: false,
                    dialogcreateorUpdateUser: {
                        title: """",
                        isShow: false,
                        User: {
                            id: 0,
                            loginName: """",
                            firstName: """",
                            lastName: """",
                            emailAddress: """",
                            sex: ""u"",
                            mobile: """",
                            telephone: """",
                            fax: """",
                            wechat: """",
                            UserRoleList: [],
                            orgsList: [],
                            UserPlatformList: []
                  ");
                WriteLiteral(@"      }
                    },
                    dialogUpdateUserRole: {
                        title: """",
                        isShow: false,
                        userId: 0,
                        roles: [],
                        checkIds: [],
                        assignedRoleCount: 0,
                    },
                    dialogUpdateUserPlatform: {
                        title: """",
                        isShow: false,
                        platforms: [],
                        checkIds: [],
                        assignedPlatformCount: 0,
                    },
                    dialogUpdateUserSystem: {
                        title: """",
                        isShow: false,
                        userId: 0,
                        systems: [],
                        checkIds: [],
                        assignedSystemCount: 0,
                    },
                    checkOrg: [],
                    activeName: 'first',
                    rul");
                WriteLiteral(@"es: {
                        loginName: [{ required: true, message: '请输入登录名', trigger: 'change' }],
                        firstName: [{ required: true, message: '请输入姓', trigger: 'change' }],
                        lastName: [{ required: true, message: '请输入名', trigger: 'change' }],
                        emailAddress: [{ required: true, message: '请输入邮箱地址', trigger: ['blur', 'change'] }, { type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] }],
                        password: [{ validator: validatePass, trigger: ['blur', 'change'] }],
                        passwordRepeat: [{ validator: validatePass2, trigger: ['blur', 'change'] }],
                        newPassword: [{ validator: validatePass3, trigger: ['blur', 'change'] }],
                        newPasswordRepeat: [{ validator: validatePass4, trigger: ['blur', 'change'] }],
                    },
                    dialogPwd: {
                        isShow: false,
                        newPassword: void 0,
        ");
                WriteLiteral(@"                newPasswordRepeat: void 0,
                        currentPassword: """",
                        userId: 0
                    },
                };
            },
            created() {
                this.getUserList();
                this.getSystemList();
                this.getPlatformList();
                this.getRoleList();
            },
            methods: {
                //【角色选中 改变】
                handleCheckedRolesChange(value) {
                    this.dialogUpdateUserRole.assignedRoleCount = value.length;//选中数量
                },
                handleCheckedPlatformChange(value) {
                    this.dialogUpdateUserPlatform.assignedPlatformCount = value.length;//选中数量
                },
                handleCheckedSystemChange(value) {
                    this.dialogUpdateUserSystem.assignedSystemCount = value.length;//选中数量
                },
                //【获取用户列表】
                getUserList: function () {
                    this.list");
                WriteLiteral(@"Loading = true;
                    var _self = this;
                    $.ajax({
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json',
                        url: '/rest/bmsUser/users/get',
                        data: JSON.stringify(_self.filters),
                        success: function (data) {
                            if (data.success == true) {
                                _self.total = data.page.totalCount;
                                _self.userlist = data.data;
                                _self.listLoading = false;
                            } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
 ");
                WriteLiteral(@"                           _self.listLoading = false;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                //【获取角色列表】
                getRoleList: function () {
                    this.listLoading = true;
                    var _self = this;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/role/lis");
                WriteLiteral(@"t/simple/get',
                        data: { key: """" },
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogUpdateUserRole.roles = data.data;
                            } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {

                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });

                            }
                        }
                    });
         ");
                WriteLiteral(@"       },
                //【获取平台列表】
                getPlatformList: function () {
                    this.listLoading = true;
                    var _self = this;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/platform/list/simple/get',
                        data: { key: """" },
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogUpdateUserPlatform.platforms = data.data;
                            } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {

                            ");
                WriteLiteral(@"} else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });

                            }
                        }
                    });
                },
                //【获取系统列表】
                getSystemList: function () {
                    this.listLoading = true;
                    var _self = this;
                    $.ajax({
                        type: 'GET',
                        url: '/rest/system/systems/all/get',
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogUpdateUserSystem.systems = data.data;
                            } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                }");
                WriteLiteral(@");
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                //【组织架构选中事件】
                handleChange() {
                    var _self = this;

                    if (_self.checkOrg.length <= 0) {
                     ");
                WriteLiteral(@"   return
                    }

                    var checkOrg = _self.checkOrg.toString();
                    var orgsList = _self.dialogcreateorUpdateUser.User.orgsList;
                    if (orgsList.length > 0) {
                        for (var i = 0; i < orgsList.length; i++) {
                            if (orgsList[i].ids == checkOrg) {
                                return
                            }
                        }
                    }
                    _self.dialogcreateorUpdateUser.User.orgsList.push({ ids: checkOrg, displayName: $('.el-cascader .el-input__inner').val() })

                },
                handleClose(tag) {
                    this.dialogcreateorUpdateUser.User.orgsList.splice(this.dialogcreateorUpdateUser.User.orgsList.indexOf(tag), 1);
                },
                //【查询】
                search: function () {
                    this.getUserList();
                },
                // 只显示待提交的数据
                handleShowChan");
                WriteLiteral(@"ged: function (val) {
                    this.filters.isChanged = val ? 1 : 0;
                    this.getUserList();
                },
                // 改变每页显示几条数据
                handleSizeChange(val) {
                    this.filters.pageSize = val;
                    this.getUserList();
                },
                //【点击第几页】
                handleCurrentChange(val) {
                    this.filters.currentPage = val;
                    this.getUserList();
                },
                //【打开用户编辑弹窗，获取用户编辑详情】
                edit(userId) {
                    var _self = this;
                    this.dialogcreateorUpdateUser.title = ""编辑用户 userId:"" + userId;
                    this.dialogcreateorUpdateUser.isShow = true;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/bmsUser/detail/' + userId,
                        success: function (data) {
                            if (data.success == true) {
       ");
                WriteLiteral(@"                         _self.dialogcreateorUpdateUser.User = data.data;
                            } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
               ");
                WriteLiteral(@"                 });
                            }
                        }
                    });
                },
                //【打开用户创建弹窗】
                create: function () {
                    this.dialogcreateorUpdateUser.title = ""新增用户"";
                    this.dialogcreateorUpdateUser.isShow = true;
                    this.dialogcreateorUpdateUser.User = {
                        id: 0,
                        loginName: """",
                        firstName: """",
                        lastName: """",
                        emailAddress: """",
                        sex: ""u"",
                        mobile: """",
                        telephone: """",
                        fax: """",
                        wechat: """",
                        orgIds: [],
                        orgsList: []
                    };
                    if (this.$refs.UserFrom !== undefined) {
                        this.$refs.UserFrom.resetFields();
                    }
                ");
                WriteLiteral(@"},
                //【创建或编辑用户】
                saveUser: function () {
                    this.listLoading = true;
                    var _self = this;
                    _self.$refs.UserFrom.validate((valid) => {
                        if (valid) {
                            if (_self.dialogcreateorUpdateUser.User.id > 0) {
                                //console.log(_self.dialogcreateorUpdateUser.User);
                                //return
                                //修改用户
                                $.ajax({
                                    type: 'POST',
                                    dataType: 'json',
                                    contentType: 'application/json',
                                    url: '../../rest/bmsUser/user/update',
                                    data: JSON.stringify(_self.dialogcreateorUpdateUser.User),
                                    success: function (data) {
                                        if (data.success == tru");
                WriteLiteral(@"e) {
                                            _self.listLoading = false;
                                            _self.dialogcreateorUpdateUser.isShow = false;
                                            _self.getUserList();
                                            _self.$notify.success({
                                                title: '成功',
                                                message: ""个人信息修改成功""
                                            });
                                        } else {
                                            _self.listLoading = false;
                                            _self.$notify.error({
                                                title: '错误',
                                                message: data.msg
                                            });
                                        }
                                    },
                                    error: function (XMLHttpRequest, textStatus, errorThr");
                WriteLiteral(@"own) {
                                        if (errorThrown == ""Unauthorized"") {
                                            window.parent.MainIndex.openLoginFrom();
                                            _self.$message({
                                                type: 'error',
                                                message: XMLHttpRequest.responseJSON.msg
                                            });
                                        } else {
                                            _self.$message({
                                                type: 'error',
                                                message: errorThrown
                                            });
                                        }
                                    }
                                });
                            } else {
                                //新增用户
                                $.ajax({
                                    type: 'POST',
  ");
                WriteLiteral(@"                                  dataType: 'json',
                                    contentType: 'application/json',
                                    url: '../../rest/bmsUser/create',
                                    data: JSON.stringify(_self.dialogcreateorUpdateUser.User),
                                    success: function (data) {
                                        if (data.success == true) {
                                            _self.listLoading = false;
                                            _self.dialogcreateorUpdateUser.isShow = false;
                                            _self.getUserList();
                                            _self.$notify.success({
                                                title: '成功',
                                                message: ""个人信息新增成功""
                                            });
                                        } else {
                                            _self.listLoading = false;
");
                WriteLiteral(@"                                            _self.$notify.error({
                                                title: '错误',
                                                message: data.msg
                                            });
                                        }
                                    },
                                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                                        if (errorThrown == ""Unauthorized"") {
                                            window.parent.MainIndex.openLoginFrom();
                                            _self.$message({
                                                type: 'error',
                                                message: XMLHttpRequest.responseJSON.msg
                                            });
                                        } else {
                                            _self.$message({
                                                type: 'err");
                WriteLiteral(@"or',
                                                message: errorThrown
                                            });
                                        }
                                    }
                                });
                            }
                        } else {
                            console.log('error submit!!');
                            return false;
                        }
                    })

                },
                //【修改用户状态】
                modifyStatus(user, status) {
                    var _self = this;
                    this.$confirm('此操作将更改【' + user.loginName + '】状态, 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        $.ajax({
                            type: 'POST',
                            dataType: 'json',
                            contentType");
                WriteLiteral(@": 'application/json',
                            url: '../../rest/bmsUser/status/update',
                            data: JSON.stringify({ id: user.id, status: status }),
                            success: function (data) {
                                if (data.success == true) {
                                    _self.listLoading = false;
                                    _self.getUserList();
                                } else {
                                    _self.$notify.error({
                                        title: '错误',
                                        message: data.msg
                                    });
                                }
                            },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                if (errorThrown == ""Unauthorized"") {
                                    window.parent.MainIndex.openLoginFrom();
                                    _self.$messag");
                WriteLiteral(@"e({
                                        type: 'error',
                                        message: XMLHttpRequest.responseJSON.msg
                                    });
                                } else {
                                    _self.$message({
                                        type: 'error',
                                        message: errorThrown
                                    });
                                }
                            }
                        });
                    }).catch(() => {
                        _self.$message({
                            type: 'info',
                            message: '已取消'
                        });
                    });
                },
                //【编辑用户密码】
                editUserPassword(userId) {
                    var _self = this;
                    _self.dialogPwd.isShow = true;
                    _self.dialogPwd.userId = userId;
                    _self.dialog");
                WriteLiteral(@"Pwd.newPassword = """";
                    _self.dialogPwd.newPasswordRepeat = """";
                },
                //【修改用户密码】
                saveUserPassword() {
                    var _self = this;
                    _self.$refs.passwordform.validate((valid) => {
                        if (valid) {
                            //修改用户密码
                            $.ajax({
                                type: 'POST',
                                dataType: 'json',
                                contentType: 'application/json',
                                url: '../../rest/bmsUser/password/update',
                                data: JSON.stringify(_self.dialogPwd),
                                success: function (data) {
                                    if (data.success == true) {
                                        _self.$notify.success({
                                            title: '成功',
                                            message: ""密码修改成功""
          ");
                WriteLiteral(@"                              });
                                        _self.dialogPwd.isShow = false;
                                    } else {
                                        _self.$notify.error({
                                            title: '错误',
                                            message: data.msg
                                        });
                                    }
                                },
                                error: function (XMLHttpRequest, textStatus, errorThrown) {
                                    if (errorThrown == ""Unauthorized"") {
                                        window.parent.MainIndex.openLoginFrom();
                                        _self.$message({
                                            type: 'error',
                                            message: XMLHttpRequest.responseJSON.msg
                                        });
                                    } else {
                      ");
                WriteLiteral(@"                  _self.$message({
                                            type: 'error',
                                            message: errorThrown
                                        });
                                    }
                                }
                            });
                        } else {
                            console.log('error submit!!');
                            return false;
                        }
                    })
                },
                //【删除用户】
                deleteUser(user) {
                    var _self = this;
                    this.$confirm('此操作将删除[' + user.loginName + '], 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        $.ajax({
                            type: 'GET',
                            url: '../../rest/bmsUser/delete/' + ");
                WriteLiteral(@"user.id,
                            success: function (data) {
                                if (data.success == true) {
                                    _self.getUserList();
                                } else {
                                    _self.$notify.error({
                                        title: '错误',
                                        message: data.msg
                                    });
                                }
                            },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                if (errorThrown == ""Unauthorized"") {
                                    window.parent.MainIndex.openLoginFrom();
                                    _self.$message({
                                        type: 'error',
                                        message: XMLHttpRequest.responseJSON.msg
                                    });
                                } else {
     ");
                WriteLiteral(@"                               _self.$message({
                                        type: 'error',
                                        message: errorThrown
                                    });
                                }
                            }
                        });
                    }).catch(() => {
                        _self.$message({
                            type: 'info',
                            message: '已取消'
                        });
                    });
                },
                //【打开用户角色编辑弹窗】
                openUpdateRoleDialog(userId) {
                    var _self = this;
                    _self.dialogUpdateUserRole.title = ""编辑角色：用户"" + userId;
                    _self.dialogUpdateUserRole.isShow = true;
                    _self.dialogUpdateUserRole.checkIds = [];
                    _self.dialogUpdateUserRole.userId = userId;
                    _self.dialogUpdateUserRole.assignedRoleCount = 0;
                    _se");
                WriteLiteral(@"lf.dialogLoading = true;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/bmsuser/role/grant/' + userId,
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogUpdateUserRole.checkIds = data.data;
                                _self.dialogUpdateUserRole.assignedRoleCount = _self.dialogUpdateUserRole.checkIds.length;//初始化 选中数量
                                _self.dialogLoading = false;
                            } else {
                                _self.dialogLoading = false;
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            _");
                WriteLiteral(@"self.dialogLoading = false;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                saveRole() {
                    var _self = this;
                    $.ajax({
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json',
                        url: '../../rest/bmsuser/role/grant/u");
                WriteLiteral(@"pdate',
                        data: JSON.stringify(_self.dialogUpdateUserRole),
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogLoading = false;
                                _self.dialogUpdateUserRole.isShow = false;
                                _self.$notify.success({
                                    title: '成功',
                                    message: ""角色修改成功""
                                });
                            } else {
                                _self.dialogLoading = false;
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            _self.dialogLoading = fal");
                WriteLiteral(@"se;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                //【打开用户平台编辑弹窗】
                openUpdatePlatDialog(userId) {
                    var _self = this;
                    _self.dialogUpdateUserPlatform.title = ""编辑可操作平台：用户"" + userId;
                    _self.dialogUpdateUserPlatform.userId = userId;
                    _self.dialogUpdateUserPlatform.is");
                WriteLiteral(@"Show = true;
                    _self.dialogUpdateUserPlatform.checkIds = [];
                    _self.dialogUpdateUserPlatform.assignedPlatformCount = 0;
                    _self.dialogLoading = true;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/bmsuser/platformids/grant/' + userId,
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogUpdateUserPlatform.checkIds = data.data;
                                _self.dialogUpdateUserPlatform.assignedPlatformCount = _self.dialogUpdateUserPlatform.checkIds.length;//初始化 选中数量
                                _self.dialogLoading = false;
                            } else {
                                _self.dialogLoading = false;
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
    ");
                WriteLiteral(@"                            });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            _self.dialogLoading = false;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                savePlatform() {
                    var _self = this;
                    $");
                WriteLiteral(@".ajax({
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json',
                        url: '../../rest/bmsuser/platform/grant/update',
                        data: JSON.stringify(_self.dialogUpdateUserPlatform),
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogLoading = false;
                                _self.dialogUpdateUserPlatform.isShow = false;
                                _self.$notify.success({
                                    title: '成功',
                                    message: ""平台修改成功""
                                });
                            } else {
                                _self.dialogLoading = false;
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
            ");
                WriteLiteral(@"                    });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            _self.dialogLoading = false;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                //【打开用户授权系统编辑弹窗】
                openUpdateSystemDialog(userId) {
                  ");
                WriteLiteral(@"  var _self = this;
                    _self.dialogUpdateUserSystem.title = ""编辑可操作系统：用户"" + userId;
                    _self.dialogUpdateUserSystem.userId = userId;
                    _self.dialogUpdateUserSystem.isShow = true;
                    _self.dialogUpdateUserSystem.checkIds = [];
                    _self.dialogUpdateUserSystem.assignedSystemCount = 0;
                    _self.dialogLoading = true;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/bmsuser/system/grant/' + userId,
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogUpdateUserSystem.checkIds = data.data;
                                _self.dialogUpdateUserSystem.assignedSystemCount = _self.dialogUpdateUserSystem.checkIds.length;//初始化 选中数量
                                _self.dialogLoading = false;
                            } else {
                         ");
                WriteLiteral(@"       _self.dialogLoading = false;
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            _self.dialogLoading = false;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                }");
                WriteLiteral(@");
                            }
                        }
                    });
                },
                saveSystem() {
                    var _self = this;
                    $.ajax({
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json',
                        url: '../../rest/bmsuser/system/grant/update',
                        data: JSON.stringify(_self.dialogUpdateUserSystem),
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogLoading = false;
                                _self.dialogUpdateUserSystem.isShow = false;
                                _self.$notify.success({
                                    title: '成功',
                                    message: ""系统修改成功""
                                });
                            } else {
                                _self.dia");
                WriteLiteral(@"logLoading = false;
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            _self.dialogLoading = false;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
            ");
                WriteLiteral("                }\r\n                        }\r\n                    });\r\n                }\r\n\r\n            }\r\n        }\r\n        var Ctor = Vue.extend(Main)\r\n        new Ctor().$mount(\'#userlist\')\r\n    </script>\r\n");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
