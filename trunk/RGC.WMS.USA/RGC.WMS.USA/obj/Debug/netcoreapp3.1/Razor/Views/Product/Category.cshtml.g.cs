#pragma checksum "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Product\Category.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b6677a2d425e0bdd58c426fac8c83b00f9f4a166"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Product_Category), @"mvc.1.0.view", @"/Views/Product/Category.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b6677a2d425e0bdd58c426fac8c83b00f9f4a166", @"/Views/Product/Category.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"804fc8bd0ed383ec8f2a14309e921cbb1975ce29", @"/Views/_ViewImports.cshtml")]
    public class Views_Product_Category : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("plr20"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Product\Category.cshtml"
  
    ViewData["Title"] = "Category";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    input[type=""checkbox""] {
        width: 16px;
        height: 16px;
        display: inline-block;
        text-align: center;
        vertical-align: middle;
        line-height: 16px;
        position: relative;
        margin: 8px;
    }

        input[type=""checkbox""]::before {
            content: """";
            position: absolute;
            top: 0;
            left: 0;
            background: #fff;
            width: 100%;
            height: 100%;
            border: 1px solid #d9d9d9
        }

        input[type=""checkbox""]:checked::before {
            content: ""\2713"";
            background-color: #fff;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            border: 1px solid #6fc469;
            color: #6fc469;
            font-size: 16px;
            font-weight: bold;
        }

    .syncbtn {
        float: right;
        position: sticky;
        top: 4px;
        right: 10px;
     ");
            WriteLiteral("   z-index: 10;\r\n        margin-right: 10px;\r\n    }\r\n</style>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b6677a2d425e0bdd58c426fac8c83b00f9f4a1664799", async() => {
                WriteLiteral(@"
    <div id=""wrapper"">
        <!-- 标题和地址 -->
        <el-row>
            <el-col :span=""24"" class=""breadcrumb-container"">
                <el-breadcrumb separator=""/"">
                    <el-breadcrumb-item><strong>产品管理</strong></el-breadcrumb-item>
                    <el-breadcrumb-item>产品分类</el-breadcrumb-item>
                </el-breadcrumb>
            </el-col>
        </el-row>
        <el-radio-group v-model=""radio1"" size=""mini"" v-on:change=""GetClassTree"">
            <el-radio-button label=""0"" disabled>默认分类</el-radio-button>
            <el-radio-button label=""1"">功能分类</el-radio-button>
        </el-radio-group>
        <el-row>
            <el-col :span=""10"">
                <div>
                    <el-tree :data=""classlist""
                             :props=""defaultProps""
                             node-key=""id""
                             default-expand-all
                             :render-content=""renderContent"">
                    </el-tree>
              ");
                WriteLiteral(@"  </div>
            </el-col>
            <el-col :span=""13"" :offset=""1"">
                <span>【{{checkName}}】</span>
                <el-table :data=""productForm.items"" size=""small"" highlight-current-row v-loading=""listLoading"" style=""width: 100%;margin-top:10px;"">
                    <el-table-column type=""index"" width=""60""></el-table-column>
                    <el-table-column prop=""id"" label=""id"" width=""60""></el-table-column>
                    <el-table-column min-width=""180"" prop=""fullEName"" label=""商品名"">
                        <template slot-scope=""scope"">
                            <!--鼠标滑过，显示图片-->
                            <el-popover placement=""right""
                                        trigger=""hover"">
                                <img :src=""scope.row.primaryImageSrcFull"" class=""pimg"" alt=""no image"" v-if=""scope.row.primaryImageSrcFull!=''"" width=""250"">
                                <i slot=""reference"">{{scope.row.fullEName}}</i>
                            </el-popover");
                WriteLiteral(@">
                        </template>
                    </el-table-column>
                    <el-table-column prop=""factoryModel"" label=""型号""></el-table-column>
                </el-table>

                <el-col :span=""24"" class=""toolbar"">
                    <el-pagination layout=""prev, pager, next"" small :page-size=""10"" :total=""total2"" style=""float:right;"" v-on:current-change=""handleCurrentChange2""></el-pagination>
                </el-col>
            </el-col>
        </el-row>
    </div>
    <script>
        var Main = {
            data() {
                return {
                    loading: false,
                    radio1: 1,
                    categoryIds: [],
                    cascader: [],
                    classlist: [],//菜单列表
                    defaultProps: {
                        children: 'children',
                        label: 'eName'
                    },
                    value1: true,
                    editLoading: false,
                 ");
                WriteLiteral(@"   editFormRules: {
                        eName: [
                            { required: true, message: '请输入英文名', trigger: 'blur' }
                        ],
                        // cName:[{ required: true, message: '请输入中文名称', trigger: 'blur' }]
                    },
                    editForm: {
                        id: '',
                        eName: '',
                        cName: '',
                        code: '',
                        seqNo: '',
                        isShow: false,
                        byteStr: '',
                        srcFull: '',
                        src: ''
                    },
                    srcFull: '',
                    //分页
                    total: 0,
                    total2: 0,
                    page: 1,
                    page2: 1,
                    //商品界面
                    items: [],
                    checkName: '未选中类别',
                    listLoading: false,
                    addLoading: f");
                WriteLiteral(@"alse,
                    productFormVisible: false,
                    productForm: {
                        items: [],
                        id: '',
                        classCode: '',
                        check: ''
                    },
                    productForm2: {
                        items: [],
                        id: '',
                        classCode: '',
                        check: ''
                    },
                    filters: {
                        searchKey: """",
                        isChanged: 0
                    },
                }
            },
            methods: {
                getTreeData(data) {
                    // 循环遍历json数据
                    for (var i = 0; i < data.length; i++) {

                        if (data[i].children.length < 1) {
                            // children若为空数组，则将children设为undefined
                            data[i].children = undefined;
                        } else {
           ");
                WriteLiteral(@"                 // children若不为空数组，则继续 递归调用 本方法
                            this.getTreeData(data[i].children);
                        }
                    }
                    return data;
                },
                searchProduct() {
                    this.page = 1;
                    this.getProductExludeList();
                },
                handleSuccess(res, file, fileList) {
                    var _self = this;
                    var url = URL.createObjectURL(file.raw);
                    _self.editForm.imageSrcFull = url;
                    _self.srcFull = url;
                    var reader = new FileReader();
                    reader.readAsDataURL(file.raw);
                    reader.onload = function (e) {
                        _self.editForm.byteStr = e.target.result;

                    };
                },
                //【获取菜单列表】
                GetClassTree() {
                    var _self = this;
                    var ename = '默认分类';
");
                WriteLiteral(@"                    var type = 1;

                    if (_self.radio1 == 0) {
                        ename = '默认分类';
                        type = 0;
                    } else if (_self.radio1 == 1) {
                        ename = '功能分类';
                        type = 1;

                    }

                    var list = new Array({ ""id"": 0, ""eName"": ename, ""seqNo"": 1, ""parentId"": 0, ""child"": [] });
                    _self.classlist = list;
                    $.ajax({
                        type: 'GET',
                        dataType: 'json',
                        async: false,
                        url: '/rest/category/product/list?type=' + type,
                        success: function (data) {
                            if (data.success == true) {
                                list = new Array({ ""id"": 0, ""eName"": ename, ""seqNo"": 1, ""parentId"": 0, ""children"": data.data });
                                _self.classlist = list;
                            } el");
                WriteLiteral(@"se {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
  ");
                WriteLiteral(@"              },

                //【点击第几页】
                handleCurrentChange(val) {
                    this.page = val;
                },
                handleCurrentChange2(val) {
                    this.page2 = val;
                    this.getProductIncludeList();
                },
                //【获取分类下商品】
                getProductIncludeList() {
                    var _self = this;
                    _self.listLoading = true;
                    $.ajax({
                        type: 'GET',
                        dataType: 'json',
                        url: '/rest/product/category/list',
                        data: { categoryId: _self.productForm.id, key: null, pageSize: 10, currentPage: _self.page2 },
                        success: function (data) {
                            if (data.success == true) {
                                _self.total2 = data.page.totalCount;
                                _self.productForm.items = data.data;
                     ");
                WriteLiteral(@"       } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        },
               ");
                WriteLiteral(@"         complete() {
                            _self.listLoading = false;
                        }
                    });
                },

                //【渲染树】
                renderContent(createElement, { node, data, store }) {
                    var _self = this;
                    var noeditdel = false;//没有编辑和删除按钮
                    var noadd = false;//有新增按钮
                    if (data.id == 0) { noeditdel = true; }
                    if (node.level > 3) { noadd = true; }
                    var elementHtml = createElement('span', [
                        createElement('input', {
                            attrs: {
                                type: ""checkbox"",
                                checked: data.isShow,
                                disabled: true,
                                style: node.level > 1 ? """" : ""display:none""
                            }
                        }),
                        createElement('span', node.label),
           ");
                WriteLiteral(@"             createElement('span', {
                            attrs: {
                                style: ""position: absolute;right: 10px;top: 3px;""
                            }
                        }, [
                            createElement('el-button', {
                                attrs: {
                                    size: ""mini"",
                                    disabled: noeditdel,
                                    plain: true,
                                    style: node.level > 1 ? """" : ""display:none"",
                                    icon: ""el-icon-search"",
                                    circle: true,
                                    title: ""查看产品""
                                }, on: {
                                    click: function () {
                                        cancelBubble();
                                        _self.productForm.id = data.id;
                                        _self.categoryIds = [];
     ");
                WriteLiteral(@"                                   _self.productId = 0;
                                        _self.getProductIncludeList();
                                        _self.checkName = node.label;

                                    }
                                }
                            }),
                        ]),
                    ]);
                    return elementHtml;
                },

                //【菜单树 操作】
                removeSubmit(store, data) {
                    this.$confirm('确定删除该菜单吗?', '提示', {
                        type: 'warning'
                    }).then(() => {
                        this.listLoading = true;
                        var _self = this;

                        $.ajax({
                            type: 'GET',
                            dataType: 'json',
                            async: false,
                            url: '/rest/category/product/delete?id=' + data.id,
                            success: function (da");
                WriteLiteral(@"ta) {
                                if (data.success) {
                                    _self.$message({
                                        type: 'success',
                                        message: '删除成功!'
                                    });
                                    _self.GetClassTree();
                                    _self.productForm.items = [];
                                    _self.checkName = '未选中类别';
                                }
                                else {
                                    _self.$message({
                                        type: 'error',
                                        message: data.msg
                                    });
                                }
                            },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                if (errorThrown == ""Unauthorized"") {
                                    window.parent.Ma");
                WriteLiteral(@"inIndex.openLoginFrom();
                                    _self.$message({
                                        type: 'error',
                                        message: XMLHttpRequest.responseJSON.msg
                                    });
                                } else {
                                    _self.$message({
                                        type: 'error',
                                        message: errorThrown
                                    });
                                }
                            },
                            complete() {
                                _self.listLoading = false;
                            }
                        });


                    }).catch(() => {

                    });
                },
            },
            mounted() {
                this.GetClassTree();
            }
        }
        var Ctor = Vue.extend(Main);
        new Ctor().$mount('#wrapper');
    </scr");
                WriteLiteral("ipt>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
