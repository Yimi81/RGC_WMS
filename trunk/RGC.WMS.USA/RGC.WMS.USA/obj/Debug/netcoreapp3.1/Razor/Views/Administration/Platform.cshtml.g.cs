#pragma checksum "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Administration\Platform.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bec4f990f5a859c58722b111f770c927181fc47c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Administration_Platform), @"mvc.1.0.view", @"/Views/Administration/Platform.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bec4f990f5a859c58722b111f770c927181fc47c", @"/Views/Administration/Platform.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"804fc8bd0ed383ec8f2a14309e921cbb1975ce29", @"/Views/_ViewImports.cshtml")]
    public class Views_Administration_Platform : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("plr20"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Administration\Platform.cshtml"
  
    ViewData["Title"] = "Platform";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<style>\r\n    .el-badge__content.is-fixed {\r\n        top: 10px;\r\n        right: 0;\r\n    }\r\n</style>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bec4f990f5a859c58722b111f770c927181fc47c3820", async() => {
                WriteLiteral(@"
    <div id=""platformList"">
        <!-- 标题和地址 -->
        <el-row>
            <el-col :span=""24"" class=""breadcrumb-container"">
                <el-breadcrumb separator=""/"">
                    <el-breadcrumb-item><strong>系统管理</strong></el-breadcrumb-item>
                    <el-breadcrumb-item>平台管理</el-breadcrumb-item>
                </el-breadcrumb>
            </el-col>
        </el-row>
        <!--工具条-->
        <!--工具条-->
        <el-col :span=""24"" class=""toolbar"">
            <el-form :inline=""true"" size=""small"" :model=""filters"">
                <el-form-item>
                    <el-input placeholder=""关键字"" v-model=""filters.searchKey"" clearable></el-input>
                </el-form-item>
                <el-form-item>
                    <el-button icon=""el-icon-search"" v-on:click=""search"">查询</el-button>
                    <el-button type=""primary"" icon=""el-icon-plus"" v-on:click=""openCreateForm"">新增</el-button>
                </el-form-item>

            </el-form>
        ");
                WriteLiteral(@"</el-col>

        <!--列表-->
        <el-table :data=""platformlist"" size=""mini"" highlight-current-row v-loading=""listLoading"" style=""width: 100%"">
            <el-table-column prop=""id"" label=""Id"" width=""100"" fixed=""left"" sortable></el-table-column>
            <el-table-column prop=""eName"" width=""240"" label=""英文名称""></el-table-column>
            <el-table-column prop=""cName"" width=""240"" label=""中文名称""></el-table-column>
            <el-table-column label=""操作"" min-width=""200"" fixed=""right"">
                <template slot-scope=""scope"">
                    <el-button type=""warning"" plain size=""mini"" v-on:click=""openEditForm(scope.row)"">编 辑</el-button>
                    <el-button type=""danger"" size=""mini"" v-on:click=""delPlatform(scope.row.id)"">删 除</el-button>
                    <el-button plain size=""mini"" v-on:click=""openUsersForm(scope.row)"">用 户</el-button>
                </template>
            </el-table-column>
        </el-table>

        <!--工具条-->
        <el-col :span=""24"" class=""too");
                WriteLiteral(@"lbar"">
            <el-pagination v-on:size-change=""handleSizeChange"" v-on:current-change=""handleCurrentChange"" :current-page=""page"" :page-sizes=""[10,20,30,40,50]"" :page-size=""pageSize"" layout=""total, sizes, prev, pager, next, jumper"" :total=""total"" style=""float:right;"">
            </el-pagination>
        </el-col>

        <!--详情界面-->
        <el-dialog :title=""title"" :visible.sync=""detailFormVisible"" :close-on-click-modal=""false"" top=""5%"" width=""600px"">
            <el-form :model=""detailForm"" size=""small"" label-width=""150px"" class=""detailForm"">
                <el-form-item label=""英文名称："">
                    <el-input v-model=""detailForm.eName"" style=""width:350px""></el-input>
                </el-form-item>
                <el-form-item label=""中文名称："">
                    <el-input v-model=""detailForm.cName"" style=""width:350px""></el-input>
                </el-form-item>
            </el-form>
            <div slot=""footer"" class=""dialog-footer"">
                <el-button type=""primary"" s");
                WriteLiteral(@"ize=""small"" v-on:click=""savePlatform"">保 存</el-button>
            </div>
        </el-dialog>
        <el-dialog :title=""usersForm.title"" :visible.sync=""usersForm.isShow"" top=""5%"" width=""600px"">
            <el-table :data=""usersForm.list"" style=""width: 100%"" size=""mini"" v-loading=""dialogLoading"">
                <el-table-column prop=""id"" label=""Id"" width=""180"">
                </el-table-column>
                <el-table-column prop=""fullName"" label=""姓名"">
                </el-table-column>
            </el-table>
            <el-pagination small
                           v-on:current-change=""handleCurrentChangeUsrs""
                           layout=""prev, pager, next""
                           :current-page.sync=""usersForm.currentPage""
                           :total=""usersForm.total"">
            </el-pagination>
        </el-dialog>
    </div>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        var Main = {
            data() {
                return {
                    filters: {
                        searchKey: '',
                        type: void 0,
                    },
                    total: 0,
                    page: 1,
                    currentPage: 1,
                    pageSize: 10,
                    listLoading: false,
                    //详情界面
                    detailFormVisible: false,
                    detailForm: {
                        id: 0,
                        eName: void 0,
                        cName: void 0
                    },
                    title: void 0,
                    platformlist: [],
                    dialogLoading: false,
                    usersForm: {
                        isShow: false,
                        list: [],
                        title: """",
                        id:0,
                        currentPage: 1,
                        total: 0,
              ");
                WriteLiteral(@"      },
                };
            },
            created() {
                this.getPlatformList();
            },
            methods: {
                openEditForm: function (row) {
                    var _self = this;
                    _self.title = ""编辑:"" + row.eName;
                    _self.detailFormVisible = true;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/platform/detail/' + row.id,
                        success: function (data) {
                            if (data.success == true) {
                                _self.detailForm = data.data;
                            } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, error");
                WriteLiteral(@"Thrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                openCreateForm: function () {
                    this.title = ""新增"";
                    this.detailFormVisible = true;
                    this.detailForm.id = 0;
                    this.detailForm.eName = void 0;
                    this.detailForm.cName = void 0;
                },
        ");
                WriteLiteral(@"        //改变每页显示数据条数
                handleSizeChange(val) {
                    this.pageSize = val;
                    this.getPlatformList();
                },
                //【点击第几页】
                handleCurrentChange(val) {
                    this.currentPage = val;
                    this.getPlatformList();
                },
                search: function () {
                    this.getPlatformList();
                },
                getPlatformList() {
                    var _self = this;
                    _self.listLoading = true;
                    $.ajax({
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json',
                        url: '/rest/platform/list/page/get',
                        data: JSON.stringify({ searchKey: _self.filters.searchKey, pageSize: _self.pageSize, currentPage: _self.currentPage }),
                        success: function (data) {
                 ");
                WriteLiteral(@"           if (data.success) {
                                _self.total = data.page.totalCount;
                                _self.platformlist = data.data;
                                _self.listLoading = false;
                            } else {
                                _self.listLoading = false;
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            _self.listLoading = false;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.r");
                WriteLiteral(@"esponseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                savePlatform() {
                    var _self = this;
                    try {
                        if (_self.detailForm.id > 0) {
                            $.ajax({
                                type: 'POST',
                                dataType: 'json',
                                contentType: 'application/json',
                                url: '../../rest/platform/update',
                                data: JSON.stringify(_self.detailForm),
                                success: function (data) {
                                    if (data.success == true) {
        ");
                WriteLiteral(@"                                _self.$notify({
                                            title: '成功',
                                            message: '保存成功！',
                                            type: 'success'
                                        });
                                        _self.detailFormVisible = false;
                                        _self.getPlatformList();
                                    }
                                    else {
                                        _self.$notify.error({
                                            title: '错误',
                                            message: data.msg
                                        });
                                    }
                                },
                                error: function (XMLHttpRequest, textStatus, errorThrown) {
                                    if (errorThrown == ""Unauthorized"") {
                                        window.parent.");
                WriteLiteral(@"MainIndex.openLoginFrom();
                                        _self.$message({
                                            type: 'error',
                                            message: XMLHttpRequest.responseJSON.msg
                                        });
                                    } else {
                                        _self.$message({
                                            type: 'error',
                                            message: errorThrown
                                        });
                                    }
                                }
                            });
                        } else {
                            $.ajax({
                                type: 'POST',
                                dataType: 'json',
                                contentType: 'application/json',
                                url: '../../rest/platform/create',
                                data: JSON.stringify(_self.de");
                WriteLiteral(@"tailForm),
                                success: function (data) {
                                    if (data.success == true) {
                                        _self.$notify({
                                            title: '成功',
                                            message: '创建平台成功！',
                                            type: 'success'
                                        });
                                        _self.detailFormVisible = false;
                                        _self.getPlatformList();
                                    }
                                    else {
                                        _self.$notify.error({
                                            title: '错误',
                                            message: data.msg
                                        });
                                    }
                                },
                                error: function (XMLHttpRequest, textStatu");
                WriteLiteral(@"s, errorThrown) {
                                    if (errorThrown == ""Unauthorized"") {
                                        window.parent.MainIndex.openLoginFrom();
                                        _self.$message({
                                            type: 'error',
                                            message: XMLHttpRequest.responseJSON.msg
                                        });
                                    } else {
                                        _self.$message({
                                            type: 'error',
                                            message: errorThrown
                                        });
                                    }
                                }
                            });
                        }
                    }
                    finally {
                        _self.loading = false
                    }
                },
                //分类删除常量
                delPl");
                WriteLiteral(@"atform(id) {
                    var _self = this;
                    this.$confirm(""确定删除吗"", '提示', {
                        type: 'warning'
                    }).then(() => {
                        _self.listLoading = true;

                        $.ajax({
                            type: 'GET',
                            dataType: 'json',
                            async: false,
                            url: '../../rest/platform/delete/' + id,
                            success: function (data) {
                                if (data.success && data.code == 0) {
                                    _self.$message({
                                        type: 'success',
                                        message: '删除成功!'
                                    });
                                    _self.getPlatformList();
                                }
                                else {
                                    _self.$message({
                       ");
                WriteLiteral(@"                 type: 'error',
                                        message: data.msg
                                    });
                                }
                                _self.listLoading = false;

                            },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                _self.listLoading = false;
                                if (errorThrown == ""Unauthorized"") {
                                    window.parent.MainIndex.openLoginFrom();
                                    _self.$message({
                                        type: 'error',
                                        message: XMLHttpRequest.responseJSON.msg
                                    });
                                } else {
                                    _self.$message({
                                        type: 'error',
                                        message: errorThrown
                  ");
                WriteLiteral(@"                  });
                                }
                            }
                        });
                    }).catch(() => {

                    });
                },
                //【打开授权用户列表弹窗】
                openUsersForm: function (row) {
                    var _self = this;
                    _self.dialogLoading = true;
                    _self.usersForm.title = row.eName + ""的授权用户:"";
                    _self.usersForm.isShow = true;
                    _self.usersForm.currentPage = 1;
                    _self.usersForm.id = row.id;
                    _self.getGrantesUsers();
                    
                },
                getGrantesUsers() {
                    var _self = this;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/platform/granted/users',
                        data: { paltformId: _self.usersForm.id, currentPage: _self.usersForm.currentPage },
                     ");
                WriteLiteral(@"   success: function (data) {
                            if (data.success == true) {
                                _self.usersForm.list = data.data;
                                _self.usersForm.total = data.page.totalCount;
                                _self.dialogLoading = false;

                            } else {
                                _self.dialogLoading = false;
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            _self.dialogLoading = false;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    t");
                WriteLiteral(@"ype: 'error',
                                    message: ""未登入""
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                //【点击第几页】
                handleCurrentChangeUsrs(val) {
                    this.currentPage = val;
                    this.getGrantesUsers();
                },
            }
        }
        var Ctor = Vue.extend(Main)
        new Ctor().$mount('#platformList')
    </script>
");
            }
            );
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
