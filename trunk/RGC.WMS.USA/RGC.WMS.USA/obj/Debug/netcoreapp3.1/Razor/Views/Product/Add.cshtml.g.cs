#pragma checksum "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Product\Add.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "20e916c1debb06e6c1f89d3ddc9e91c813e142ed"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Product_Add), @"mvc.1.0.view", @"/Views/Product/Add.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"20e916c1debb06e6c1f89d3ddc9e91c813e142ed", @"/Views/Product/Add.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"804fc8bd0ed383ec8f2a14309e921cbb1975ce29", @"/Views/_ViewImports.cshtml")]
    public class Views_Product_Add : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("plr20"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Product\Add.cshtml"
  
    ViewData["Title"] = "Add";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<link rel=""stylesheet"" href=""/lib/elFinder/lib/jquery-ui/themes/base/all.css"" />
<link rel=""stylesheet"" href=""/lib/elFinder/lib/elfinder/css/elfinder.full.css"" />
<link rel=""stylesheet"" href=""/lib/elFinder/lib/elfinder/css/theme.css"" />
<style>
    #nav {
        width: 100%;
        /*position: fixed;
        top: 100px;*/
        /*ie6下样式，加下划线表示只针对ie6 的hack */
        _position: absolute; /* 把导航栏位置定义为绝对位置  关键*/
        _top: expression(documentElement.scrollTop + ""px""); /* 把导航栏位置放在浏览器垂直滚动条的顶端  关键 */
        z-index: 100; /* 让导航栏浮在网页的高层位置，遇到flash和图片时候也能始终保持最外层 */
    }

    .pl90 {
        padding-left: 90px;
    }

    .el-step__title {
        font-size: 13px !important;
        line-height: 38px;
        cursor: pointer;
    }

    .w145 {
        width: 145px;
    }

    .w178 {
        width: 178px;
    }

    .w180 {
        width: 180px;
    }

    .w250 {
        width: 250px;
    }

    .w365 {
        width: 365px;
    }

    .avatar {
        width: 2");
            WriteLiteral(@"00px;
        height: 200px;
        display: block;
    }

    .el-card {
        border: none;
    }

    .el-card__header {
        border-bottom: none;
        padding-left: 0;
    }

    .el-card__body {
        padding-left: 0;
    }

    .el-steps--simple {
        padding: 10px 6% !important;
    }

    .item_title {
        height: 35px;
        padding: 0 15px;
        margin-bottom: 20px;
        line-height: 35px;
        background-color: #E5E9F2;
        border-radius: 3px;
    }

        .item_title .el-button {
            margin-top: 4px;
        }

    .skuform .el-tabs__header {
        position: sticky;
        top: 0;
        background: white;
        z-index: 9;
        margin-top: 10px;
    }

    .savebtn {
        float: right;
        position: sticky;
        top: 4px;
        right: 10px;
        z-index: 10;
        margin-right: 10px;
    }

    .skuform .el-tabs__item {
        height: 44px;
        line-height: 44px;
    }");
            WriteLiteral(@"

    .hide-empty .el-table__empty-block {
        display: none;
    }

    .detail-table > .el-table__body-wrapper > table > tbody > tr > td:not(:first-child), .detail-table > .el-table__body-wrapper > table > tbody > tr > td:not(:first-child) > .cell {
        padding: 0;
        border: none;
    }
</style>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "20e916c1debb06e6c1f89d3ddc9e91c813e142ed6078", async() => {
                WriteLiteral("\r\n    <div id=\"wrapper\">\r\n        <!-- 标题和地址 -->\r\n        <el-row>\r\n            <el-col :span=\"24\" class=\"breadcrumb-container\">\r\n");
                WriteLiteral("                <el-breadcrumb separator=\"/\">\r\n");
                WriteLiteral(@"                    <el-breadcrumb-item><strong>产品管理</strong></el-breadcrumb-item>
                    <el-breadcrumb-item>产品添加</el-breadcrumb-item>
                </el-breadcrumb>
            </el-col>
        </el-row>
        <template>
            <article class=""administration-maintenance-container"" v-loading=""loading"">
                <div ref=""nav_sku"" id=""nav_sku"">
                    <el-button type=""primary"" size=""medium"" class=""savebtn"" v-on:click=""save(false)"" v-loading=""loading"">保 存</el-button>
                    <el-button type=""primary"" size=""medium"" class=""savebtn"" v-on:click=""save(true)"" v-loading=""loading"">保存并同步</el-button>
                    <el-form :inline=""true"" :model=""currProduct"" ref=""currProduct"" label-width=""300px"" class=""skuform"" label-position=""right"" size=""mini"">
                        <el-tabs v-model=""activeName"" type=""card"" ");
                WriteLiteral(@"@tab-click=""tabClick"">
                            <el-tab-pane label=""基本信息"" name=""first"">
                                <el-card class=""box-card"" shadow=""hover"">
                                    <span slot=""header"" class=""step-jump pr"" id=""sku_baseInfo"">
                                        <i class=""tip-tit""><i class=""pr z-in2 pl10"">基本信息</i></i>
                                    </span>
                                    <el-form-item label=""Product Name(产品名称)"" prop=""fullEName"" :rules=""[{ required: true, message: '请输入产品名称', trigger: 'blur' }]"">
                                        <el-input v-model=""currProduct.fullEName"" type=""textarea"" :rows=""1"" :autosize=""{ minRows: 1, maxRows: 4}""
                                                  placeholder=""产品名称"" class=""w180"" />
                                    </el-form-item>
                                    <el-form-item label=""Model(型号)"" prop=""factoryModel"" :rules=""[{ required: true, message: '请输入型号', trigger: 'blur' }]"">
            ");
                WriteLiteral(@"                            <el-input v-model=""currProduct.factoryModel"" class=""w180""></el-input>
                                    </el-form-item>
                                    <el-form-item label=""Category(分类)"" prop=""funcCategoryIds"" :rules=""[{ required: true, message: '请选择', trigger: 'blur' }]"">
                                        <el-cascader class=""w180""
                                                     :options=""cascader""
                                                     v-model=""currProduct.funcCategoryIds""
                                                     ");
                WriteLiteral(@"                                                     clearable>
                                        </el-cascader>
                                    </el-form-item>
                                    <el-form-item label=""SKU"">
                                        <el-input v-model.trim=""currProduct.sku"" class=""w180""></el-input>
                                    </el-form-item>
                                    <el-form-item label=""UPC"">
                                        <el-input v-model.trim=""currProduct.upc"" class=""w180""></el-input>
                                    </el-form-item>
                                    <el-form-item label=""Certification(认证)"">
                                        <el-input v-model.trim=""currProduct.certification"" class=""w180""></el-input>
                                    </el-form-item>
                                    <el-form-item label=""Package Configuration(包装配置)"">
                                        <el-input v-model.trim=""cu");
                WriteLiteral(@"rrProduct.packingConfig"" class=""w180""></el-input>
                                    </el-form-item>
                                    <el-row>
                                        <el-form-item label=""Product Dimension(产品尺寸)"">
                                            <el-input-number :controls=""false"" :precision=""2"" placeholder=""0.00"" :min=""0.00"" v-model.trim=""currProduct.productSizeLength""></el-input-number>
                                            -
                                            <el-input-number :controls=""false"" :precision=""2"" placeholder=""0.00"" :min=""0.00"" v-model.trim=""currProduct.productSizeWidth""></el-input-number>
                                            -
                                            <el-input-number :controls=""false"" :precision=""2"" placeholder=""0.00"" :min=""0.00"" v-model.trim=""currProduct.productSizeHeight""></el-input-number>
                                            <el-tag type=""info"" size=""small"">inch</el-tag>
                               ");
                WriteLiteral(@"         </el-form-item>
                                    </el-row>
                                    <el-row>
                                        <el-form-item label=""Product Dimension (包装尺寸)"">
                                            <el-input-number :controls=""false"" :precision=""2"" placeholder=""0.00"" :min=""0.00"" v-model.trim=""currProduct.packingSizeLength""></el-input-number>
                                            -
                                            <el-input-number :controls=""false"" :precision=""2"" placeholder=""0.00"" :min=""0.00"" v-model.trim=""currProduct.packingSizeWidth""></el-input-number>
                                            -
                                            <el-input-number :controls=""false"" :precision=""2"" placeholder=""0.00"" :min=""0.00"" v-model.trim=""currProduct.packingSizeHeight""></el-input-number>
                                            <el-tag type=""info"" size=""small"">inch</el-tag>
                                        </el-form-item>
    ");
                WriteLiteral(@"                                </el-row>
                                    <el-row>
                                        <el-form-item label=""Net Weight (净重)"" prop=""netWeight"">
                                            <el-input-number class=""w145"" controls-position=""right"" :precision=""1"" :step=""0.1"" :min=""0.0"" v-model.trim=""currProduct.netWeight""></el-input-number>
                                            <el-tag type=""info"" size=""small"">LB</el-tag>
                                        </el-form-item>
                                        <el-form-item label=""Gross Weight (毛重)"" prop=""grossWeight"">
                                            <el-input-number class=""w145"" controls-position=""right"" :precision=""1"" :step=""0.1"" :min=""0.0"" v-model.trim=""currProduct.grossWeight"">
                                            </el-input-number>
                                            <el-tag type=""info"" size=""small"">LB</el-tag>
                                        </el-form-item>
     ");
                WriteLiteral(@"                               </el-row>
                                    <el-row>
                                        <el-form-item label=""qty/pallet(1托数量)"">
                                            <el-input-number class=""w180"" :controls=""false"" :precision=""0"" :min=""0.0"" v-model.trim=""currProduct.qtyPallet"">
                                            </el-input-number>
                                        </el-form-item>
                                        <el-form-item label=""qty/40HQ(40HQ装柜数)"">
                                            <el-input-number class=""w180"" :controls=""false"" :precision=""1"" :min=""0.0"" v-model.trim=""currProduct.loadingQty_40HQ"">
                                            </el-input-number>
                                        </el-form-item>
                                    </el-row>
");
                WriteLiteral(@"                                    <el-row class=""pl90"">
                                        <el-form size=""mini"" :inline=""true"" v-model=""Custom"">
                                            <el-form-item v-for=""(item,index) in Custom"" :key=""index"">
                                                <el-row :gutter=""12"">
                                                    <el-col :span=""10"">
                                                        <el-col :span=""12"">
                                                            <el-input placeholder=""参数名称"" v-model.trim=""item.cName"" auto-complete=""off"" icon=""edit"">
                                                            </el-input>
                                                        </el-col>
                                                        <el-col :span=""12"">
                                                            <el-input placeholder=""英文名称"" v-model.trim=""item.eName"" auto-complete=""off"" icon=""edit"">
                              ");
                WriteLiteral(@"                              </el-input>
                                                        </el-col>
                                                    </el-col>
                                                    <el-col :span=""10"">
                                                        <el-input placeholder=""值"" v-model.trim=""item.value"" auto-complete=""off"" icon=""edit""></el-input>
                                                    </el-col>
                                                    <el-col :span=""3"">
                                                        <el-button type=""danger"" icon=""el-icon-delete"" plain v-on:click=""Custom.splice(index , 1)""></el-button>
                                                    </el-col>
                                                </el-row>
                                            </el-form-item>
                                        </el-form>
                                    </el-row>
                                    <el-form-it");
                WriteLiteral(@"em label=""Remark (产品备注)"">
                                        <el-input v-model=""currProduct.remarks"" type=""textarea"" :rows=""4""
                                                  placeholder=""Remark (产品备注)"" class=""w365"" />
                                    </el-form-item>
                                </el-card>
                            </el-tab-pane>
                            <el-tab-pane label=""产品配置/详情"" name=""second"">
                                <el-card class=""box-card"" shadow=""none"" :key=""menuKey1"">
                                    <span slot=""header"" class=""step-jump pr"" id=""sku_config"">
                                        <i class=""tip-tit""><i class=""pr z-in2 pl10"">部件配置详情 Components Configuration/Details</i></i>
                                    </span>
                                    <el-button size=""mini"" plain v-on:click=""getPartsList()"">添加部件</el-button>
                                    <el-table empty-text="" "" max-height=""150""
                            ");
                WriteLiteral(@"                  style=""width: 100%;margin-bottom:0px;"" border class=""gvq hide-empty mt20"" size=""mini"">
                                        <el-table-column label=""组件名称 Unit"" width=""150""></el-table-column>
                                        <el-table-column label=""部件名称 Part"" width=""200"" align=""center""></el-table-column>
                                        <el-table-column label=""材质 Material"" width=""300"" align=""center""></el-table-column>
                                        <el-table-column label=""表面处理 Surface Treatment"" width=""300"" align=""center""></el-table-column>
                                        <el-table-column label=""备注 Remarks"" align=""center""></el-table-column>
                                    </el-table>
                                    <el-table class=""data-table detail-table"" v-loading=""listLoading"" :data=""currProduct.partChildren"" :fit=""true"" border size=""mini"" :show-header=""false"" style=""width: 100%;"">
                                        <el-table-column wid");
                WriteLiteral(@"th=""150"">
                                            <template slot-scope=""scope"">
                                                {{scope.row.cName}}
                                                <br />
                                                {{scope.row.eName}}
                                            </template>
                                        </el-table-column>
                                        <el-table-column>
                                            <template slot-scope=""scope1"">
                                                <el-table :fit=""true""
                                                          :show-header=""false""
                                                          style=""width: 100%;""
                                                          :data=""scope1.row.children"">
                                                    <el-table-column width=""200"" align=""center"">
                                                        <template slot-scop");
                WriteLiteral(@"e=""scope"">
                                                            {{scope.row.cName}}
                                                            <br />
                                                            {{scope.row.eName}}
                                                        </template>
                                                    </el-table-column>
                                                    <el-table-column prop=""material"" width=""300"" align=""center"">
                                                        <template slot-scope=""scope"">
                                                            <el-row>
                                                                <el-input size=""small"" placeholder=""材质"" type=""textarea"" v-model=""scope.row.material"" style=""width: 100%;"" />

                                                            </el-row>
                                                            <el-row>
                                                     ");
                WriteLiteral(@"           <el-input size=""small"" placeholder=""Material"" type=""textarea"" v-model=""scope.row.eMaterial"" style=""width: 100%;"" />

                                                            </el-row>
                                                        </template>
                                                    </el-table-column>
                                                    <el-table-column prop=""surface"" width=""300"" align=""center"">
                                                        <template slot-scope=""scope"">
                                                            <el-row>
                                                                <el-input size=""small"" placeholder=""表面处理"" type=""textarea"" v-model=""scope.row.surface"" style=""width: 100%;"" />

                                                            </el-row>
                                                            <el-row>
                                                                <el-input size=""small"" placeho");
                WriteLiteral(@"lder=""Surface Treatment"" type=""textarea"" v-model=""scope.row.eSurface"" style=""width: 100%;"" />

                                                            </el-row>
                                                        </template>
                                                    </el-table-column>
                                                    <el-table-column prop=""remarks"" align=""center"">
                                                        <template slot-scope=""scope"">
                                                            <el-row>
                                                                <el-input size=""small"" placeholder=""备注"" type=""textarea"" v-model=""scope.row.remarks"" style=""width: 100%;"" />

                                                            </el-row>
                                                            <el-row>
                                                                <el-input size=""small"" placeholder=""Remarks"" type=""textarea"" v-model=""scope.r");
                WriteLiteral(@"ow.eRemarks"" style=""width: 100%;"" />
                                                            </el-row>

                                                        </template>
                                                    </el-table-column>
                                                </el-table>
                                            </template>
                                        </el-table-column>
                                    </el-table>
                                </el-card>
                                <el-card class=""box-card"" shadow=""none"" :key=""menuKey2"">
                                    <span slot=""header"" class=""step-jump pr"" id=""sku_config"">
                                        <i class=""tip-tit""><i class=""pr z-in2 pl10"">配件配置详情Parts Configuration/Details</i></i>
                                    </span>
                                    <el-button size=""mini"" plain v-on:click=""getFittingList()"">添加配件</el-button>
                               ");
                WriteLiteral(@"     <el-table empty-text="" "" max-height=""150""
                                              style=""width: 100%;margin-bottom:0px;"" border class=""gvq hide-empty mt20"" size=""mini"">
                                        <el-table-column label=""组件名称 Unit"" width=""150""></el-table-column>
                                        <el-table-column label=""配件名称 Part"" width=""200"" align=""center""></el-table-column>
                                        <el-table-column label=""描述 Description"" width=""200""></el-table-column>
                                        <el-table-column label=""备注 Remarks"" align=""center""></el-table-column>
                                    </el-table>
                                    <el-table class=""data-table detail-table"" v-loading=""listLoading"" :data=""currProduct.fittingChildren"" :fit=""true"" border size=""mini"" :show-header=""false"" style=""width: 100%;"">
                                        <el-table-column width=""150"">
                                            <template slo");
                WriteLiteral(@"t-scope=""scope"">
                                                {{scope.row.cName}}
                                                <br />
                                                {{scope.row.eName}}
                                            </template>
                                        </el-table-column>
                                        <el-table-column>
                                            <template slot-scope=""scope1"">
                                                <el-table :fit=""true""
                                                          :show-header=""false""
                                                          class=""detail-table""
                                                          style=""width: 100%;""
                                                          :data=""scope1.row.children"">
                                                    <el-table-column width=""200"" align=""center"">
                                                        <templa");
                WriteLiteral(@"te slot-scope=""scope"">
                                                            {{scope.row.cName}}
                                                            <br />
                                                            {{scope.row.eName}}
                                                            <br />
                                                            <el-popover placement=""right""
                                                                        width=""400""
                                                                        v-model=""scope.row.visible"">
                                                                <el-tree :data=""gridData""
                                                                         show-checkbox
                                                                         default-expand-all
                                                                         :default-checked-keys=""gridChecked""
                                          ");
                WriteLiteral(@"                               :ref=""'gridTree'+scope.row.configId""
                                                                         node-key=""configDetailId""
                                                                         highlight-current
                                                                         class=""newprolist mt10""
                                                                         :props=""newPartProps"">
                                                                    <span class=""custom-tree-node"" slot-scope=""{ node, data }"">
                                                                        <span>{{ data.eName }} {{ data.cName }}</span>
                                                                    </span>
                                                                </el-tree>
                                                                <el-button v-on:click=""scope.row.visible=false;chooseDetail('gridTree'+scope.row.configId,scope1.$inde");
                WriteLiteral(@"x,scope.$index)"" :disabled=""gridData.length<=0"" size=""mini"" type=""success"" plain>选择</el-button>

                                                                <el-button slot=""reference"" v-on:click=""getDetailList(scope.row)"" type=""warning"" icon=""el-icon-edit"" size=""mini"" plain>新增描述</el-button>
                                                            </el-popover>
                                                        </template>
                                                    </el-table-column>
                                                    <el-table-column align=""center"" style=""padding-top:0;padding-bottom:0;"">
                                                        <template slot-scope=""scope2"">
                                                            <el-table :fit=""true""
                                                                      :show-header=""false""
                                                                      style=""width: 100%;""
                           ");
                WriteLiteral(@"                                           :data=""scope2.row.detailList"" v-if=""scope2.row.detailList.length>0"">
                                                                <el-table-column width=""200"">
                                                                    <template slot-scope=""scope3"">
                                                                        <el-popover placement=""top-start""
                                                                                    width=""160""
                                                                                    v-model=""scope3.row.visible"">
                                                                            <p>确定删除该描述?</p>
                                                                            <div class=""tr mt10"">
                                                                                <el-button size=""mini"" type=""warning"" v-on:click=""scope3.row.visible = false"" plain>取消</el-button>
                         ");
                WriteLiteral(@"                                                       <el-button type=""danger"" size=""mini"" v-on:click=""scope2.row.detailList.splice(scope3.$index , 1)"" plain>确定</el-button>
                                                                            </div>
                                                                            <el-button slot=""reference"" type=""danger"" size=""mini"" icon=""el-icon-delete"" circle plain></el-button>
                                                                        </el-popover>
                                                                        {{scope3.row.cName}}
                                                                        <br />
                                                                        {{scope3.row.eName}}
                                                                    </template>
                                                                </el-table-column>
                                                                <e");
                WriteLiteral(@"l-table-column prop=""remarks"" align=""center"">
                                                                    <template slot-scope=""scope3"">
                                                                        <el-row>
                                                                            <el-input size=""small"" placeholder=""备注"" type=""textarea"" v-model=""scope3.row.remarks"" style=""width: 100%;"" />
                                                                        </el-row>
                                                                        <el-row>
                                                                            <el-input size=""small"" placeholder=""Remarks"" type=""textarea"" v-model=""scope3.row.eRemarks"" style=""width: 100%;"" />
                                                                        </el-row>
                                                                    </template>
                                                                </el-table-column>
    ");
                WriteLiteral(@"                                                        </el-table>
                                                            <table v-else class=""w100b"" style=""border:0;min-height:87px;"">
                                                                <tr>
                                                                    <td width=""199""></td>
                                                                    <td>
                                                                        <div class=""cell""><el-input placeholder=""备注"" type=""textarea"" v-model=""scope2.row.remarks"" /></div>
                                                                        <div class=""cell""><el-input placeholder=""Remarks"" type=""textarea"" v-model=""scope2.row.eRemarks"" /></div>
                                                                    </td>
                                                                </tr>
                                                            </table>

                            ");
                WriteLiteral(@"                            </template>
                                                    </el-table-column>
                                                </el-table>
                                            </template>
                                        </el-table-column>
                                    </el-table>
                                </el-card>
                            </el-tab-pane>
                            <el-tab-pane label=""产品卖点"" name=""third"">
                                <el-card class=""box-card"" shadow=""hover"">
                                    <span slot=""header"" class=""step-jump pr"" id=""sku_point"">
                                        <i class=""tip-tit""><i class=""pr z-in2 pl10"">产品卖点 Bullet Point</i></i>
                                    </span>
                                    <el-form-item label=""中文描述"" prop=""bulletPoint"" label-width=""auto"">
                                        <textarea id=""editor1"" name=""editor1"" v-model.trim=""currPro");
                WriteLiteral(@"duct.bulletPoint""></textarea>
                                    </el-form-item>
                                    <el-form-item label=""英文描述"" prop=""eBulletPoint"" label-width=""auto"">
                                        <textarea id=""editor2"" name=""editor2"" v-model.trim=""currProduct.eBulletPoint""></textarea>
                                    </el-form-item>
                                </el-card>
                            </el-tab-pane>
                            <el-tab-pane label=""附件"" name=""fourth"">
                                <el-card class=""box-card"" shadow=""hover"">
                                    <span slot=""header"" class=""step-jump pr"" id=""sku_attachment"">
                                        <i class=""tip-tit""><i class=""pr z-in2 pl10"">附件 Attachment</i></i>
                                    </span>
                                    <el-form-item label=""Picture(产品示意图) (320*320)"" prop=""imageMain"">
                                        <div class=""m-t-10 avatar-up");
                WriteLiteral(@"loader"" v-on:click=""openFileManage()"">
                                            <div class=""el-upload el-upload--text"">
                                                <img v-if=""mainSrc"" :src=""mainSrc"" class=""avatar"">
                                                <i v-else class=""el-icon-plus avatar-uploader-icon""></i>
                                            </div>
                                        </div>
                                    </el-form-item>
                                    <div class=""pt20""></div>
                                    <el-form-item label=""附件管理"" prop=""feature"">
");
                WriteLiteral(@"                                        <el-button type=""primary"" v-on:click=""openAttachment"">附件管理</el-button>
                                    </el-form-item>
                                </el-card>
                            </el-tab-pane>
                        </el-tabs>
                    </el-form>
                    <el-dialog title=""配置添加"" :visible.sync=""configVisable"" :close-on-click-modal=""false"" top=""5%"" width=""1000px"">
                        <el-button type=""success"" v-on:click=""batchAddPackage"" size=""small"">批量添加</el-button>
                        <el-table class=""data-table"" v-loading=""listLoading"" ref=""packageMultipleTable""
                                  :data=""configData"" :fit=""true"" border v-on:selection-change=""handleSelectionChange2"">
                            <el-table-column type=""selection""
                                             width=""55"">
                            </el-table-column>
                            <el-table-column min-width=""50"" prop=""id");
                WriteLiteral(@""" label=""ID"">
                            </el-table-column>
                            <el-table-column min-width=""50"" prop=""cName"" label=""中文名"">
                            </el-table-column>
                            <el-table-column min-width=""80"" prop=""eName"" label=""英文名"">
                            </el-table-column>
                            <el-table-column width=""100"" label=""操作"">
                                <template slot-scope=""scope"">
                                    <el-button type=""primary"" plain size=""small"" class=""waves-effect"" v-on:click=""addPackage(scope.$index)"">
                                        添加
                                    </el-button>
                                </template>
                            </el-table-column>
                        </el-table>
                    </el-dialog>
                    <el-dialog title=""子键添加"" :visible.sync=""configChildVisable"" :close-on-click-modal=""false"">
                        <el-button type=""succes");
                WriteLiteral(@"s"" size=""small"" class=""waves-effect"" v-on:click=""batchAddChild()"">
                            批量添加
                        </el-button>
                        <el-table class=""data-table"" v-loading=""listLoading"" ref=""partsMultipleTable""
                                  :data=""ChildData"" :fit=""true"" border v-on:selection-change=""handleSelectionChange"" top=""5%"" width=""100%"">
                            <el-table-column type=""selection""
                                             width=""55"">
                            </el-table-column>
                            <el-table-column min-width=""50"" prop=""id"" label=""ID"">
                            </el-table-column>
                            <el-table-column min-width=""50"" prop=""cName"" label=""中文名"">
                            </el-table-column>
                            <el-table-column min-width=""80"" prop=""eName"" label=""英文名"">
                            </el-table-column>
                            <el-table-column width=""100"" label=""操作"">
");
                WriteLiteral(@"                                <template slot-scope=""scope"">
                                    <el-button type=""primary"" plain size=""small"" class=""waves-effect"" v-on:click=""addChild(scope.$index)"">
                                        添加
                                    </el-button>
                                </template>
                            </el-table-column>
                        </el-table>
                        <el-col :span=""24"">
                            <el-pagination layout=""prev, pager, next"" small :page-size=""pageSize"" :total=""total"" :current-page=""page"" style=""float:right;"" v-on:current-change=""handleCurrentChange""></el-pagination>
                        </el-col>
                    </el-dialog>
                    <el-dialog title=""部件添加"" :visible.sync=""partVisable"" :close-on-click-modal=""false"">

                        <el-button type=""primary"" size=""small"" class=""waves-effect mr10"" v-on:click=""chooseParts()"">
                            确定
            ");
                WriteLiteral(@"            </el-button>
                        选择部件
                        <el-tree :data=""newPartList""
                                 show-checkbox
                                 default-expand-all
                                 :default-checked-keys=""newPartChecked""
                                 ref=""newPartTree""
                                 node-key=""id""
                                 highlight-current
                                 class=""newprolist mt10""
                                 :props=""newPartProps""
                                 v-loading=""bujianloading"">
                            <span class=""custom-tree-node"" slot-scope=""{ node, data }"">
                                <span>{{ data.eName }} {{ data.cName }}</span>
                            </span>
                        </el-tree>




                    </el-dialog>

                    <el-dialog title=""配件添加"" :visible.sync=""fittingVisable"" :close-on-click-modal=""false"">
                    ");
                WriteLiteral(@"    <el-button type=""primary"" size=""small"" class=""waves-effect mr10"" v-on:click=""chooseFitting()"">
                            确定
                        </el-button>

                        选择配件
                        <el-tree :data=""newFittingList""
                                 show-checkbox
                                 default-expand-all
                                 :default-checked-keys=""newFittingChecked""
                                 ref=""newFittingTree""
                                 node-key=""id""
                                 highlight-current
                                 class=""newprolist mt10""
                                 :props=""newFittingProps""
                                 v-loading=""peijianloading"">
                            <span class=""custom-tree-node"" slot-scope=""{ node, data }"">
                                <span>{{ data.eName }} {{ data.cName }}</span>
                            </span>
                        </el-tree>




    ");
                WriteLiteral(@"                </el-dialog>
                    <el-dialog title=""附件 Attachment"" :visible.sync=""fileManageVisable"" :close-on-click-modal=""false"" top=""5%"" width=""1000px"">
                        工厂型号 : {{currProduct.factoryModel}}
                        <div ref=""elfinder"" id=""elfinder""></div>
                        <span slot=""footer"" class=""dialog- footer"" style=""display:block;text-align: center;margin-top: 20px"">
                            <el-button type=""primary"" v-on:click=""saveMainUrl"">设为预览图</el-button>
                        </span>
                    </el-dialog>
                </div>
            </article>
        </template>
    </div>
    <script src=""/lib/elFinder/lib/jquery-ui/jquery-ui.min.js""></script>
    <script src=""/lib/elFinder/lib/elfinder/js/elfinder.full.js""></script>
    <script src=""/lib/elFinder/lib/elfinder/js/i18n/elfinder.zh_CN.js""></script>
    <script type=""text/javascript"" src=""/lib/ckeditor/ckeditor.js""></script>
    <script>
        var Main = {
     ");
                WriteLiteral(@"       data() {
                return {
                    menuKey1: 1,
                    menuKey2: 2,
                    gridData:[],
                    gridChecked:[],
                    partChildren: [],
                    fittingChildren:[],
                    nextPartVisable:false,
                    nextFittingVisable:false,
                    partVisable: false,
                    fittingVisable: false,
                    newPartList: [],
                    newPartPackageList: [],
                    newFittingList: [],
                    newFittingPackageList: [],
                    ComponentList: [],
                    newPartProps: {
                        children: 'children',
                        label: 'eName'
                    },
                    newFittingProps: {
                        children: 'children',
                        label: 'eName'
                    },
                    newPartChecked: [],
                    newPartPackage");
                WriteLiteral(@"Checked: [],
                    newFittingChecked: [],
                    newFittingPackageChecked: [],
                    PartChildren: [],
                    FittingChildren: [],
                    defaultProps: {
                        children: 'child',
                        label: 'cName'
                    },
                    defaultChecked: [1],
                    configData: [],
                    data: [],
                    configChildData: [],
                    ChildData: [],
                    configVisable: false,
                    configChildVisable: false,
                    previewSrc: '',
                    mainSrc: '',
                    selectedFile: '',
                    selectedFilePath: '',
                    selectedFileByte: '',
                    fileManageVisable: false,
                    active: 0,
                    cascader: [],
                    // 添加自定义配置
                    dialogAdd: {
                        isShow: fa");
                WriteLiteral(@"lse,
                        label: void 0,
                        chineseLabel: void 0,
                        value: void 0,
                    },
                    descEditor: '',
                    descEditor2: '',
                    featureEditor: '',
                    activeName: 'first',
                    loading: false,
                    dialogVisible: this.visible,
                    currProduct: {
                        partChildren: [],
                        fittingChildren:[],
                        packageList: [

                        ],
                        partsList: [

                        ],
                        status: 0,
                        cName: void 0,
                        fullCName: void 0,
                        eName: void 0,
                        fullEName: void 0,
                        factoryModel: void 0,
                        remarks: void 0,
                        funcCategoryId: 0,
                        ");
                WriteLiteral(@"funcCategory: {
                            code: 0,
                            eName: void 0,
                            cName: void 0,
                            parentId: 0,
                            src: void 0,
                            srcFull: void 0,
                            showOrder: 0,
                            isShow: true,
                            byteStr: void 0,
                            id: 0,
                        },
                        funcCategoryIdPath: void 0,
                        funcCategoryIds: [
                            0
                        ],
                        primaryImageSrc: void 0,
                        imageMain: void 0,
                        sku: void 0,
                        upc: void 0,
                        productSize: void 0,
                        packingSize: void 0,
                        productSizeLength: 0,
                        productSizeWidth: 0,
                        productSizeHeight: 0");
                WriteLiteral(@",
                        packingSizeLength: 0,
                        packingSizeWidth: 0,
                        packingSizeHeight: 0,
                        netWeight: void 0,
                        grossWeight: void 0,
                        certification: void 0,
                        qtyPallet: 0,
                        loadingQty_40HQ: void 0,
                        bulletPoint: void 0,
                        eBulletPoint: void 0,
                        id: 0,
                        isSync:false,
                    },
                    title: '',
                    skuList: [],
                    skuListVisable: false,
                    filters: {
                        searchKey: """",
                        isChanged: 0,
                        type: void 0,
                        status: void 0
                    },
                    total: 0,
                    page: 1,
                    pageSize: 10,
                    total1: 30,
             ");
                WriteLiteral(@"       page1: 1,
                    pageSize1: 10,
                    listLoading: false,
                    peijianloading:false,
                    bujianloading:false,
                    Configuration: [],
                    no: 0,
                    multipleSelection: [],
                    multipleSelection2: [],
                    Custom: [],
                    packageId: 0,
                    visible:false,
                    // model1:[]
                    // fatherid:0
                }
            },
            created() {
                this.getCategoryCasCader();
            },
            methods: {
                tabClick(event) {
                    if (event.$el.id == ""pane-second"") {
                        ++this.menuKey1;
                        ++this.menuKey2;
                    }
                },
                getTreeData(data) {
                    // 循环遍历json数据
                    for (var i = 0; i < data.length; i++) {

              ");
                WriteLiteral(@"          if (data[i].children.length < 1) {
                            // children若为空数组，则将children设为undefined
                            data[i].children = undefined;
                        } else {
                            // children若不为空数组，则继续 递归调用 本方法
                            this.getTreeData(data[i].children);
                        }
                    }
                    return data;
                },
                chooseDetail(refName,index1, index2) {
                    var _self = this
                    _self.gridChecked = this.$refs[refName].getCheckedKeys()
                    for (let key in _self.gridData)
                    {
                        if (_self.gridChecked.indexOf(_self.gridData[key].configDetailId) > -1) {
                            var i=0
                            for (let item in _self.currProduct.fittingChildren[index1].children[index2].detailList) {
                                if (_self.currProduct.fittingChildren[index1].childre");
                WriteLiteral(@"n[index2].detailList[item].configDetailId==_self.gridData[key].configDetailId) {
                                    i++;
                                }
                            }
                            if (i == 0) {
                                _self.currProduct.fittingChildren[index1].children[index2].detailList.push(Object.assign({}, _self.gridData[key]))
                            }
                        }
                    }
                     _self.currProduct.fittingChildren[index1].children[index2].detailList = _self.currProduct.fittingChildren[index1].children[index2].detailList.filter(key => _self.gridChecked.includes(key.configDetailId))
                },
                getDetailList(row) {
                    var _self = this;
                    _self.gridChecked=[]
                    for (let key in row.detailList) {
                        _self.gridChecked.push(row.detailList[key].configDetailId)
                    }
                    $.ajax({
     ");
                WriteLiteral(@"                   type: 'GET',
                        url: '/rest/product/fitting/detail',
                        data: { id: row.configId },
                        success: function (data) {
                            if (data.success == true) {
                                _self.gridData = data.data

                            } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }

                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
    ");
                WriteLiteral(@"                            });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                partsTreeGetChecked() {
                    for (let parent of this.currProduct.partChildren) {
                        //父级选中
                        if (parent.children.length > 0) {
                          //子级选中
                            for (let child of parent.children) {
                                this.newPartChecked.push(child.configId)
                            }
                        } else {
                            this.newPartChecked.push(parent.id)

                        }
                    }

                },
                fittingTreeGetChecked() {
                    for (le");
                WriteLiteral(@"t parent of this.currProduct.fittingChildren) {
                        //父级选中
                        if (parent.children.length > 0) {
                          //子级选中
                            for (let child of parent.children) {
                                this.newFittingChecked.push(child.configId)
                            }
                        } else {
                            this.newFittingChecked.push(parent.id)

                        }
                    }

                },
                fetchPartsData(type, ids) {
                    var $this=this
                    var data = {
                        type: type,
                        partChildren:[],
                        fittingChildren:[],
                        componentIdList:[],
                    }
                    data.partChildren = this.currProduct.partChildren
                    data.fittingChildren = this.currProduct.fittingChildren
                    data.componentIdList = id");
                WriteLiteral(@"s
                    $.ajax({
                        type: 'Post',
                        url: '/rest/product/parts/edit',
                         dataType: 'json',
                            contentType: 'application/json',
                        data:JSON.stringify(data),
                        success: function (data) {
                            if (data.success == true) {
                                if (type == 2) {
                                    $this.currProduct.partChildren = []

                                    $this.currProduct.partChildren = data.data.partChildren
                                } else if (type == 3) {
                                    $this.currProduct.fittingChildren = []

                                    $this.currProduct.fittingChildren = data.data.fittingChildren
                                }
                            } else {
                                $this.$notify.error({
                                    title: '错误'");
                WriteLiteral(@",
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                $this.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                $this.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                chooseParts() {
                    this.newPartChecked=this.$refs.newPar");
                WriteLiteral(@"tTree.getCheckedKeys()
                    this.fetchPartsData(2, this.newPartChecked)
                    this.partVisable=false

                },
                chooseFitting() {
                    this.newFittingChecked=this.$refs.newFittingTree.getCheckedKeys()
                    this.fetchPartsData(3, this.newFittingChecked)
                    this.fittingVisable=false
                },
                deletePackage(index) {
                    this.Configuration.splice(index, 1);
                    for (var key in this.Configuration) {
                        this.Configuration[key].index = key;
                    }
                },
                addProperty() {
                    this.Custom.push(
                        {
                            cName: '',
                            eName: '',
                            value: '',
                            seqNo: 0,
                            skuId: 0,
                            id: 0,
                 ");
                WriteLiteral(@"       }
                    )
                },
                getCheckedKeys() {
                    var model = this.$refs.tree.getCheckedNodes();
                    console.log(model)
                    for (var key in model) {
                        this.Configuration.push(
                            {
                                configId: model[key].id,
                                item: model[key].eName + "" "" + model[key].cName,
                                cName: model[key].cName,
                                eName: model[key].eName,
                                desc: '',
                                seqNo: model[key].seqNo,
                                value: model[key].value,
                                child: [
                                ]
                            }
                        );
                    }
                    this.configVisable = false;

                },
                addChild(index) {
                    ");
                WriteLiteral(@"this.Configuration[this.no].child.push(
                        {
                            index: this.no,
                            configId: this.ChildData[index].id,
                            packageId: 0,//this.ChildData[index].packageId,
                            item: this.ChildData[index].eName + "" "" + this.ChildData[index].cName,
                            cName: this.ChildData[index].cName,
                            eName: this.ChildData[index].eName,
                            desc: '',
                            seqNo: this.ChildData[index].seqNo,
                            value: this.ChildData[index].value,
                        }
                    );

                },
                batchAddChild() {
                    var _self = this;
                    if (this.multipleSelection.length > 0) {
                        for (var key in _self.multipleSelection) {
                            _self.Configuration[_self.no].child.push(
                      ");
                WriteLiteral(@"          {
                                    index: _self.no,
                                    configId: _self.multipleSelection[key].id,
                                    packageId: 0,//_self.multipleSelection[key].packageId,
                                    item: _self.multipleSelection[key].eName + "" "" + _self.multipleSelection[key].cName,
                                    cName: _self.multipleSelection[key].cName,
                                    eName: _self.multipleSelection[key].eName,
                                    desc: '',
                                    seqNo: _self.multipleSelection[key].seqNo,
                                    value: _self.multipleSelection[key].value,
                                }
                            );
                        }
                        _self.configChildVisable = false;
                    }
                },
                addPackage(index) {
                    this.Configuration.push(
                 ");
                WriteLiteral(@"       {
                            index: this.Configuration.length,
                            configId: this.configData[index].id,
                            item: this.configData[index].eName + "" "" + this.configData[index].cName,
                            cName: this.configData[index].cName,
                            eName: this.configData[index].eName,
                            desc: '',
                            seqNo: this.configData[index].seqNo,
                            value: this.configData[index].value,
                            child: [
                            ]
                        }
                    );
                },
                batchAddPackage() {
                    var _self = this;
                    if (_self.multipleSelection2.length > 0) {
                        var model = _self.multipleSelection2;
                        for (var key in model) {
                            _self.Configuration.push(
                                ");
                WriteLiteral(@"{
                                    index: _self.Configuration.length,
                                    configId: model[key].id,
                                    item: model[key].eName + "" "" + model[key].cName,
                                    cName: model[key].cName,
                                    eName: model[key].eName,
                                    desc: '',
                                    seqNo: model[key].seqNo,
                                    value: model[key].value,
                                    child: [
                                    ]
                                }
                            );
                        }
                        this.configVisable = false;
                    }

                },
                handleSelectionChange(val) {
                    this.multipleSelection = val;
                    console.log(this.multipleSelection)
                },
                handleSelectionChange2(val) {
        ");
                WriteLiteral(@"            this.multipleSelection2 = val;
                    console.log(this.multipleSelection2)
                },
                //【渲染树】
                renderContent(createElement, { node, data, store }) {
                    var _self = this;
                    if (data.id == 0) { noeditdel = true; }
                    if (node.level > 3) { noadd = true; }
                    var elementHtml = createElement('span', [
                        createElement('span', node.label + "" "" + data.eName),
                    ]);
                    return elementHtml;
                },
                getAllPackage() {
                    var $this = this;
                    $.ajax({
                        type: 'Get',
                        url: '/rest/product/package',
                        success: function (data) {
                            if (data.success == true) {
                                $this.configData = data.data;
                            } else {
            ");
                WriteLiteral(@"                    $this.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                $this.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                $this.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
");
                WriteLiteral(@"                getParts(id) {
                    var $this = this;
                    $.ajax({
                        type: 'Get',
                        url: '/rest/product/parts',
                        data: { packageId: id, pageSize: this.pageSize, currentPage: this.page },
                        success: function (data) {
                            if (data.success == true) {
                                $this.ChildData = data.data.list;
                                $this.total = data.data.page.totalCount;
                                $this.page = data.data.page.currentPage;
                            } else {
                                $this.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if");
                WriteLiteral(@" (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                $this.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                $this.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                getPartsList() {
                    var $this = this;
                    $this.partVisable = true;
                    $this.nextPartVisable = false;
                    $this.bujianloading = true;
                    $.ajax({
                        type: 'Get',
                        url: '/rest/product/parts/list',
            ");
                WriteLiteral(@"            success: function (data) {
                            if (data.success == true) {
                                $this.newPartList = data.data
                                $this.partsTreeGetChecked()
                            } else {
                                $this.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                $this.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                             ");
                WriteLiteral(@"   $this.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        },
                        complete(){
                            $this.bujianloading = false;
                        }
                    });
                },
                getFittingList() {
                    var $this = this;
                    $this.fittingVisable = true;
                    $this.nextFittingVisable = false;
                    $this.peijianloading = true;
                    $.ajax({
                        type: 'Get',
                        url: '/rest/product/fitting/list',
                        success: function (data) {
                            if (data.success == true) {
                                $this.newFittingList = data.data
                                $this.fittingTreeGetChecked()
                            } else");
                WriteLiteral(@" {
                                $this.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                $this.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                $this.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        },
                        comp");
                WriteLiteral(@"lete(){
                            $this.peijianloading = false;
                        }
                    });
                },

                openConfig() {
                    this.defaultChecked = [];
                    this.configVisable = true;
                    this.getAllPackage();

                },
                openProperty(id, index) {
                    this.page = 1;
                    this.no = index;
                    this.configChildVisable = true;
                    this.getParts(id);
                    this.packageId = id;


                },
                openAttachment() {
                    window.parent.MainIndex.addTabByIframe(""附件管理"", ""/sku/Attachment"", ""附件管理"");
                },
                delSet(index, row) {
                    this.$confirm(""确定移除 "" + row.displayName + "" 吗"", '提示', {
                        type: 'warning'
                    }).then(() => {
                        this.currProduct.SetList.splice(index, 1);
 ");
                WriteLiteral(@"                   })
                },
                addSet(row) {
                    for (let key in this.currProduct.SetList) {
                        if (this.currProduct.SetList[key].childSkuId == row.id) {
                            this.$message.error({
                                title: '错误',
                                message: '组合产品已包含该sku'
                            });
                            return;
                        }
                    }
                    this.currProduct.SetList.push({
                        parentSkuId: 0,
                        //isShow: true,
                        childSkuId: row.id,
                        displayName: row.FullEName,
                        childSkuQty: 1,
                        primaryImageSrcFull: row.primaryImageSrcFull,
                    })
                },
                /* search() {
                        this.page = 1;
                        this.getSkuList();
                    },*/");
                WriteLiteral(@"
                handleSizeChange(val) {
                    this.pageSize = val;
                    this.getParts(this.packageId);
                },
                //【点击第几页】
                handleCurrentChange(val) {
                    this.page = val;
                    this.getParts(this.packageId);
                },
                //【点击第几页】
                handleCurrentChange1(val) {
                    this.page = val;
                    this.getParts(this.packageId);
                },
                /* openSkuList() {
                        this.skuListVisable = true;
                        this.getSkuList();
                    },*/
                openFileManage() {
                    this.fileManageVisable = true;
                    //selectedFilePath = '';
                    setTimeout(() => {
                        this.fileManageInitial();
                    }, 0)
                },
                saveMainUrl() {
                    //console.log(this.ma");
                WriteLiteral(@"inSrc);
                    if (selectedFilePath != undefined && selectedFilePath != """") {
                        this.currProduct.imageMain = selectedFilePath;
                        //document.getElementById(""mainSrc"").src = mainSrc;
                        this.mainSrc = previewSrc;
                        this.fileManageVisable = false;
                    } else {
                        this.$message({
                            type: 'error',
                            message: '请选择图片'
                        });
                    }
                },
                fileManageInitial() {
                    var _self = this;
                    var myCommands = elFinder.prototype._options.commands;
                    var disabled = ['callback', 'chmod', 'editor', 'netmount', 'ping', 'search', 'zipdl', 'help']; // Not yet implemented commands in elFinder.NetCore
                    elFinder.prototype.i18.en.messages.TextArea = ""Edit"";

                    $.each(disabled, func");
                WriteLiteral(@"tion (i, cmd) {
                        (idx = $.inArray(cmd, myCommands)) !== -1 && myCommands.splice(idx, 1);
                    });

                    var options = {
                        url: '/product/connector', // Default (Local File System)
");
                WriteLiteral(@"                        rememberLastDir: false, // Prevent elFinder saving in the Browser LocalStorage the last visited directory
                        commands: myCommands,
                        lang: 'zh_CN', // elFinder supports UI and messages localization. Check the folder Content\elfinder\js\i18n for all available languages. Be sure to include the corresponding .js file(s) in the JavaScript bundle.
                        uiOptions: { // UI buttons available to the user
                            toolbar: [
                                ['back', 'forward'],
                                ['reload'],
                                ['home', 'up'],
                                ['mkdir', 'mkfile', 'upload'],
                                ['open', 'download'],
                                ['undo', 'redo'],
                                ['info'],
                                ['quicklook'],
                                ['copy', 'cut', 'paste'],
                           ");
                WriteLiteral(@"     ['rm'],
                                ['duplicate', 'rename', 'edit'],
                                ['selectall', 'selectnone', 'selectinvert'],
                                ['view', 'sort']
                            ]

                        }, handlers: {
                            select: function (event, elfinderInstance) {
                                if (event.data.selected.length == 1) {
                                    var item = $('#' + event.data.selected[0]);
                                    if (!item.hasClass('directory')) {
                                        selectedFile = event.data.selected[0];
                                        previewSrc = ""/product/connector?cmd=file&target="" + selectedFile + ""&_t="" + event.timeStamp;

                                        $.ajax({
                                            type: 'post',
                                            url: '/product/selectFile',
                                            d");
                WriteLiteral(@"ata: { target: selectedFile },
                                            success: function (data) {
                                                selectedFilePath = data;
                                            },
                                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                                if (errorThrown == ""Unauthorized"") {
                                                    window.parent.MainIndex.openLoginFrom();
                                                    _self.$message({
                                                        type: 'error',
                                                        message: XMLHttpRequest.responseJSON.msg
                                                    });
                                                } else {
                                                    _self.$message({
                                                        type: 'error',
                ");
                WriteLiteral(@"                                        message: errorThrown
                                                    });
                                                }
                                            }
                                        });
                                        return;
                                    }
                                }
                                selectedFile = null;
                            }
                        }

                    };
                    $('#elfinder').elfinder(options).elfinder('instance');
                },
                goAnchor(selector, index) {
                    this.active = index;
                    var anchor = this.$el.querySelector(selector)
                    // document.body.scrollTop = anchor.offsetTop-50; // chrome
                    // document.documentElement.scrollTop = anchor.offsetTop-50; // firefox
                    let total = anchor.offsetTop - 100;
                    ");
                WriteLiteral(@"let distance = document.documentElement.scrollTop || document.body.scrollTop
                    // this.container.scrollTop // 获取到顶部的距离(this.container便是.cate-list,为了方便存起来了)
                    let step = total / 50;
                    //const _self = this;
                    //console.log('total:' + total + 'distance:' + distance);
                    if (total > distance) {
                        smoothDown()
                    } else {
                        let newTotal = distance - total
                        step = newTotal / 50
                        smoothUp()
                    }
                    function smoothDown() {
                        if (distance < total) {
                            distance += step
                            // _this.scrollTop = distance;
                            document.body.scrollTop = distance
                            document.documentElement.scrollTop = distance

                            setTimeout(smoothDown, 10);
         ");
                WriteLiteral(@"               } else {
                            // _this.scrollTop = total
                            document.body.scrollTop = total
                            document.documentElement.scrollTop = total

                        }
                    }
                    function smoothUp() {
                        if (distance > total) {
                            distance -= step
                            //_this.scrollTop = distance
                            document.body.scrollTop = distance
                            document.documentElement.scrollTop = distance
                            setTimeout(smoothUp, 10)
                        } else {
                            // _this.scrollTop = total
                            document.body.scrollTop = distance
                            document.documentElement.scrollTop = distance
                        }
                    }

                },

                getCategoryCasCader() {
                    var $");
                WriteLiteral(@"this = this;
                    $.ajax({
                        type: 'Get',
                        url: '/rest/category/product/cascader',
                        success: function (data) {
                            if (data.success == true) {
                                $this.cascader =$this.getTreeData( data.data);

                            } else {
                                $this.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                $this.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.respo");
                WriteLiteral(@"nseJSON.msg
                                });
                            } else {
                                $this.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                save(isSync) {
                    var _valid = false;
                    var _self = this;
                    _self.currProduct.packageList = [];
                    _self.currProduct.partsList = [];
                    _self.currProduct.customList = [];
                    for (var key in this.Custom) {
                        this.Custom[key].id = 0;
                        _self.currProduct.customList.push(this.Custom[key]);
                    }
                    for (var key in this.Configuration) {
                        this.Configuration[key].id = 0;
                        _self.currPro");
                WriteLiteral(@"duct.packageList.push(this.Configuration[key]);
                    }

                    for (var key in this.Configuration) {
                        for (var key1 in this.Configuration[key].child) {
                            this.Configuration[key].child[key1].id = 0;
                            _self.currProduct.partsList.push(this.Configuration[key].child[key1]);
                        }
                    }
                    _self.currProduct.customList = _self.Custom
                    //console.log(_self.currProduct)
                    //return;
                    this.$refs['currProduct'].validate((valid) => {
                        if (valid) {
                            _valid = true;

                        }
                    });
                    if (!_valid) {
                        return false;
                    }
                    if (_self.currProduct.imageMain == undefined || _self.currProduct.imageMain == """") {
                        _self.$mes");
                WriteLiteral(@"sage({
                            type: 'error',
                            message: '请上传产品示意图'
                        });
                        return false;
                    }
                    _self.currProduct.bulletPoint = CKEDITOR.instances.editor1.getData();
                    _self.currProduct.eBulletPoint = CKEDITOR.instances.editor2.getData();
                    _self.currProduct.productSize = _self.currProduct.productSizeLength + 'x' + _self.currProduct.productSizeWidth + 'x' + _self.currProduct.productSizeHeight;
                    _self.currProduct.packingSize = _self.currProduct.packingSizeLength + 'x' + _self.currProduct.packingSizeWidth + 'x' + _self.currProduct.packingSizeHeight;
                    _self.currProduct.isSync = isSync;
                    _self.loading = true
                    try {
                        $.ajax({
                            type: 'POST',
                            dataType: 'json',
                            contentType: 'appl");
                WriteLiteral(@"ication/json',
                            url: '/rest/product/create',
                            data: JSON.stringify(_self.currProduct),
                            success: function (data) {
                                if (data.success == true) {
                                    _self.$notify({
                                        title: '成功',
                                        message: '创建产品成功！',
                                        type: 'success'
                                    });
                                    _self.clear();
                                    _self.fetchData();
                                }
                                else {
                                    _self.$notify.error({
                                        title: '错误',
                                        message: data.msg
                                    });
                                }
                            },
                            error:");
                WriteLiteral(@" function (XMLHttpRequest, textStatus, errorThrown) {
                                if (errorThrown == ""Unauthorized"") {
                                    window.parent.MainIndex.openLoginFrom();
                                    _self.$message({
                                        type: 'error',
                                        message: XMLHttpRequest.responseJSON.msg
                                    });
                                } else {
                                    _self.$message({
                                        type: 'error',
                                        message: errorThrown
                                    });
                                }
                            },
                            complete(){
                                _self.loading = false;
                            }
                        });
                    }
                    catch (e) {
                        _self.loading = false;
     ");
                WriteLiteral(@"                   _self.$message({
                            type: 'error',
                            message: e
                        });
                    }

                },
                //富文本编辑框
                fetchData() {
                    setTimeout(() => {
                        if (CKEDITOR.instances['editor1']) {
                            CKEDITOR.remove(CKEDITOR.instances['editor1']);
                            $('#cke_editor1').remove();
                        }
                        //渲染富文本框
                        this.descEditor = CKEDITOR.replace(""editor1"", {
                            uiColor: '#EFF2F7',
                            height: '300px',
                        });

                        if (CKEDITOR.instances['editor2']) {
                            CKEDITOR.remove(CKEDITOR.instances['editor2']);
                            $('#cke_editor2').remove();
                        }
                        //渲染富文本框
                   ");
                WriteLiteral(@"     this.descEditor2 = CKEDITOR.replace(""editor2"", {
                            uiColor: '#EFF2F7',
                            height: '300px',
                        });
                    }, 0)
                    /*数据调用之前，先清空值*/
                },
                clear() {
                    var _self = this;
                    _self.Configuration = [];
                    _self.Custom = [];
                    //清空缓存
                    _self.currProduct = {
                        packageList: [
                        ],
                        partsList: [

                        ],
                        status: 0,
                        cName: void 0,
                        fullCName: void 0,
                        eName: void 0,
                        fullEName: void 0,
                        factoryModel: void 0,
                        remarks: void 0,
                        funcCategoryId: 0,
                        funcCategory: {
                       ");
                WriteLiteral(@"     code: 0,
                            eName: void 0,
                            cName: void 0,
                            parentId: 0,
                            src: void 0,
                            srcFull: void 0,
                            showOrder: 0,
                            isShow: true,
                            byteStr: void 0,
                            id: 0,
                        },
                        funcCategoryIdPath: void 0,
                        funcCategoryIds: [
                            0
                        ],
                        primaryImageSrc: void 0,
                        imageMain: void 0,
                        sku: void 0,
                        upc: void 0,
                        productSize: void 0,
                        packingSize: void 0,
                        packingConfig: void 0,
                        netWeight: void 0,
                        grossWeight: void 0,
                        certification: ");
                WriteLiteral(@"void 0,
                        qtyPallet: 0,
                        loadingQty_40HQ: void 0,
                        bulletPoint: void 0,
                        eBulletPoint: void 0,
                        id: 0,
                    }
                    _self.mainSrc = """"
                },
                //onScroll() {
                //    let scrolled = document.documentElement.scrollTop || document.body.scrollTop
                //    var windowHeight = document.documentElement.clientHeight || document.body.clientHeight;
                //    //变量scrollHeight是滚动条的总高度
                //    // 586、1063分别为第二个和第三个锚点对应的距离
                //    var scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;
                //    if (scrolled < 100) {
                //        this.active = 0;
                //        this.$refs.nav.style.position = 'initial';
                //        this.$refs.nav.style.width = '100%';

                //    } else if (scroll");
                WriteLiteral(@"ed >= 100) {
                //        this.$refs.nav.style.position = 'fixed';
                //        this.$refs.nav.style.top = 0 + 'px';
                //        this.$refs.nav.style.width = '96%';
                //    }
                //    let _article = document.querySelectorAll('.step-jump')
                //    _article.forEach((item, index) => {
                //        if (scrolled + 100 >= item.offsetTop) { this.active = index }
                //        else if (scrolled == 0) {
                //            this.active = 0
                //        } else if (scrolled + windowHeight == scrollHeight) {
                //            this.active = 5
                //        }
                //    })
                //}
            },
            components: {

            },
            mounted() {
                this.$nextTick(function () {
                    // window.addEventListener('scroll', this.onScroll)
                })
                this.fetchData();
");
                WriteLiteral(@"                //窗口大小改变时重新渲染table
                var resizeTimer = null;
                $(window).resize(() => {
                    if (resizeTimer) clearTimeout(resizeTimer);
                    resizeTimer = setTimeout(() => {
                        ++this.menuKey1
                        ++this.menuKey2
                    } , 100);
                });
            }
        }
        var Ctor = Vue.extend(Main);
        new Ctor().$mount('#wrapper');
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
