#pragma checksum "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Order\SSOrderList.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b706cbf673cafa07c88543834ea725674caa6fa4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Order_SSOrderList), @"mvc.1.0.view", @"/Views/Order/SSOrderList.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b706cbf673cafa07c88543834ea725674caa6fa4", @"/Views/Order/SSOrderList.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"804fc8bd0ed383ec8f2a14309e921cbb1975ce29", @"/Views/_ViewImports.cshtml")]
    public class Views_Order_SSOrderList : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("plr20"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Order\SSOrderList.cshtml"
  
    ViewData["Title"] = "SSOrderList";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b706cbf673cafa07c88543834ea725674caa6fa43675", async() => {
                WriteLiteral(@"
    <div id=""sslist"">
        <!-- 标题和地址 -->
        <el-row>
            <el-col :span=""24"" class=""breadcrumb-container"">
                <el-breadcrumb separator=""/"">
                    <el-breadcrumb-item><strong>订单管理</strong></el-breadcrumb-item>
                    <el-breadcrumb-item>ShipStation订单</el-breadcrumb-item>
                </el-breadcrumb>
            </el-col>
        </el-row>
        <article class=""administration-tenant-container"">
            <!--搜索-->
            <el-col :span=""24"" class=""toolbar"">
                <el-form :inline=""true"" size=""small"" :model=""filters"" v-on:submit.native.prevent>

                    <el-form-item label=""订单编号"">
                        <el-input placeholder=""请输入订单编号"" v-model=""filters.searchKey""></el-input>
                    </el-form-item>
                    <el-form-item label=""订单状态"">
                        <el-select v-model=""filters.status"" placeholder=""请选择状态"" clearable>
                            <el-option v-for=""item in st");
                WriteLiteral(@"atusList""
                                       :key=""item.value""
                                       :label=""item.label""
                                       :value=""item.value"">
                            </el-option>
                        </el-select>
                    </el-form-item>
");
                WriteLiteral("\r\n                    <el-form-item>\r\n                        <el-button v-on:click=\"search\" icon=\"el-icon-search\">搜索</el-button>\r\n                    </el-form-item>\r\n");
                WriteLiteral(@"                </el-form>
            </el-col>
            <el-table :data=""orderList"" size=""mini"" :height=""height_table"" highlight-current-row v-loading=""listLoading"">
                <el-table-column prop=""id"" label=""ID"" width=""50""></el-table-column>
                <el-table-column prop=""orderNumber"" label=""订单编号"" width=""180""></el-table-column>
                <el-table-column prop=""orderStatus"" label=""订单状态"" width=""150""></el-table-column>
                <el-table-column prop=""paymentMethod"" label=""支付方式"" width=""150""></el-table-column>
                <el-table-column prop=""customerUsername"" label=""姓名""></el-table-column>
                <el-table-column prop=""customerEmail"" label=""邮箱""></el-table-column>
                <el-table-column prop=""orderDateString"" label=""下单时间""></el-table-column>
                <el-table-column prop=""modifyDateString"" label=""修改时间""></el-table-column>
                <el-table-column prop=""stockStatus"" label=""出库状态"" min-width=""80"">
                    <template slot-sco");
                WriteLiteral(@"pe=""scope"">
                        <el-tag size=""small"" v-if=""scope.row.stockStatus == 0"">未出库</el-tag>
                        <el-tag size=""small"" v-if=""scope.row.stockStatus == 1"" type=""info"">已出库</el-tag>

                    </template>
                </el-table-column>
                <el-table-column prop=""printStatus"" label=""打印状态"" min-width=""80"">
                    <template slot-scope=""scope"">
                        <el-tag size=""small"" v-if=""scope.row.printStatus == 0"">未打印</el-tag>
                        <el-tag size=""small"" v-if=""scope.row.printStatus == 1"" type=""info"">已打印</el-tag>

                    </template>
                </el-table-column>
                <el-table-column width=""220"" label=""操作"">
                    <template slot-scope=""scope"">
                        <el-dropdown trigger=""click"" size=""small"">
                            <el-button type=""primary"" size=""mini"" class=""mb5"">
                                操作
                                <i class=""el-ic");
                WriteLiteral(@"on-caret-bottom el-icon--right""></i>
                            </el-button>
                            <el-dropdown-menu slot=""dropdown"">
                                <el-dropdown-item>
                                    <div v-on:click=""openOrderSummary(scope.row.id)"">Order Summary</div>
                                </el-dropdown-item>
                                <el-dropdown-item>
                                    <div v-on:click=""openPackingSlips(scope.row.id)"">Packing Slips</div>
                                </el-dropdown-item>
                                <el-dropdown-item v-if=""scope.row.stockStatus == 0"">
                                    <div v-on:click=""stockOut(scope.row.id)"">出库</div>
                                </el-dropdown-item>
");
                WriteLiteral(@"                            </el-dropdown-menu>
                        </el-dropdown>
                    </template>
                </el-table-column>
            </el-table>
            <!--分页-->
            <el-col :span=""24"" class=""toolbar toolbar--bottom"">
                <el-pagination v-on:size-change=""handleSizeChange""
                               v-on:current-change=""handleCurrentChange""
                               :current-page.sync=""page""
                               :page-sizes=""[10,20,30,40,50]""
                               :page-size=""pageSize""
                               layout=""total, sizes, prev, pager, next, jumper""
                               :total=""total"" style=""float:right;"">
                </el-pagination>
            </el-col>
        </article>


    </div>
    <script>
        var Main = {
            data() {
                return {
                    listLoading: false,//表格loading: false,
                    orderList: [],
             ");
                WriteLiteral(@"       height_table: 650,//表格高度
                    statusEditList: [{
                        value: 1,
                        label: '初始'
                    }, {
                        value: 2,
                        label: '正常'
                    }, {
                        value: 3,
                        label: '关闭'
                    }],
                    statusList: [{
                        value: 'awaiting_payment',
                        label: 'awaiting_payment'
                    }, {
                        value: 'awaiting_shipment',
                        label: 'awaiting_shipment'
                    }, {
                        value: 'pending_fulfillment',
                        label: 'pending_fulfillment'
                    }, {
                        value: 'shipped',
                        label: 'shipped'
                    }, {
                        value: 'on_hold',
                        label: 'on_hold'
                    }, {
     ");
                WriteLiteral(@"                   value: 'cancelled',
                        label: 'cancelled'
                    }],
                    deletedList: [{
                        value: 0,
                        label: '全部显示'
                    }, {
                        value: 1,
                        label: '未删除'
                    }, {
                        value: 2,
                        label: '已删除'
                    }],
                    filters: {
                        searchKey: """",
                        status: void 0,
                        isDeleted: void 0
                    },
                    total: 0,
                    page: 1,
                    pageSize: 10,

                }
            },
            created() {
                this.getList();
            },
            methods: {
                // 改变每页显示几条数据
                handleSizeChange(val) {
                    this.pageSize = val;
                    this.getList();
                },");
                WriteLiteral(@"
                //【点击第几页】
                handleCurrentChange(val) {
                    this.page = val;
                    this.getList();
                },
                getList() {
                    this.listLoading = true;
                    var _self = this;
                    var filter = {
                        key: _self.filters.searchKey,
                        status: _self.filters.status,
                        //isDeleted: _self.filters.isDeleted,
                        pageSize: _self.pageSize,
                        currentPage: _self.page
                    };
                    $.ajax({
                        type: 'GET',
                        url: '/rest/ssorder/page/get',
                        data: filter,
                        success: function (data) {
                            if (data.success == true) {
                                _self.total = data.page.totalCount;
                                _self.orderList = data.data;
       ");
                WriteLiteral(@"                     } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        },
 ");
                WriteLiteral(@"                       complete() {
                            _self.listLoading = false;
                        }
                    });
                },
                search() {
                    this.page = 1;
                    this.getList();
                },
                //【Order Summary】
                openOrderSummary(orderId) {
                    window.parent.MainIndex.addTabByIframe(""Order Summary_"" + orderId, ""/order/SSOrderDetail?orderId="" + orderId, ""Order Summary"");
                },
                //【Packing Slips】
                openPackingSlips(orderId) {
                    window.parent.MainIndex.addTabByIframe(""Packing Slips_"" + orderId, ""/order/SSPackingSlips?orderId="" + orderId, ""Packing Slips"");
                },
                //【Pick List】
                openPickList(orderId) {
                    //window.parent.MainIndex.addTabByIframe(""Pick List_"" + orderId, ""/order/SSOrderDetail?orderId="" + orderId, ""Pick List"");
                },
    ");
                WriteLiteral(@"            stockOut() {
                    var _self = this;
                    this.$confirm(""确定要出库吗"", '提示', {
                        type: 'warning'
                    }).then(() => {
                        $.ajax({
                            type: 'GET',
                            url: '../../rest/ssorder/stock/out',
                            data: { id: id},
                            success: function (data) {
                                if (data.success == true) {
                                    _self.$notify.success({
                                        title: '成功',
                                        message: ""出库成功""
                                    });
                                } else {
                                    _self.$notify.error({
                                        title: '错误',
                                        message: data.msg
                                    });
                                }
                    ");
                WriteLiteral(@"        },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                if (errorThrown == ""Unauthorized"") {
                                    window.parent.MainIndex.openLoginFrom();
                                    _self.$message({
                                        type: 'error',
                                        message: XMLHttpRequest.responseJSON.msg
                                    });
                                } else {
                                    _self.$message({
                                        type: 'error',
                                        message: errorThrown
                                    });
                                }
                            }
                        });
                    }).catch(() => {

                    });
                }



            }
        };
        var Ctor = Vue.extend(Main)
        new Ctor().$mount('#sslist')
");
                WriteLiteral("    </script>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
