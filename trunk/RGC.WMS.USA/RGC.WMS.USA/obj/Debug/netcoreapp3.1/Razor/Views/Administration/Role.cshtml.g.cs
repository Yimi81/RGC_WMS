#pragma checksum "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Administration\Role.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "64a93c39f515bce792ca3efe2b107d8d32d03bb3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Administration_Role), @"mvc.1.0.view", @"/Views/Administration/Role.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\_ViewImports.cshtml"
using RGC.WMS.USA.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"64a93c39f515bce792ca3efe2b107d8d32d03bb3", @"/Views/Administration/Role.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"804fc8bd0ed383ec8f2a14309e921cbb1975ce29", @"/Views/_ViewImports.cshtml")]
    public class Views_Administration_Role : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("plr20"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\SVN\RGC\RGC.WMS\trunk\RGC.WMS.USA\RGC.WMS.USA\Views\Administration\Role.cshtml"
  
    ViewData["Title"] = "Role";

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "64a93c39f515bce792ca3efe2b107d8d32d03bb33645", async() => {
                WriteLiteral("\r\n    <div id=\"rolelist\">\r\n        <!-- 标题和地址 -->\r\n        <el-row>\r\n            <el-col :span=\"24\" class=\"breadcrumb-container\">\r\n");
                WriteLiteral(@"                <el-breadcrumb separator=""/"">
                    <el-breadcrumb-item><strong>系统管理</strong></el-breadcrumb-item>
                    <el-breadcrumb-item>角色管理</el-breadcrumb-item>
                </el-breadcrumb>
            </el-col>
        </el-row>
        <!--工具条-->
        <el-col :span=""24"" class=""toolbar"">
            <el-form :inline=""true"" size=""small"" :model=""filters"">
                <el-form-item>
                    <el-input placeholder=""name/displayName"" v-model=""filters.searchKey""></el-input>
                </el-form-item>
                <el-form-item>
                    <el-button icon=""el-icon-search"" v-on:click=""search"">查询</el-button>
                </el-form-item>
                <el-form-item>
                    <el-button type=""primary"" icon=""el-icon-plus"" v-on:click=""create"">新增</el-button>
                </el-form-item>
            </el-form>
        </el-col>
        <!-- 列表 -->
        <el-table size=""small"" :data=""Roles"" v-loading=""listLoadi");
                WriteLiteral(@"ng"">
            <el-table-column prop=""id"" label=""Id"" width=""100"">
            </el-table-column>
            <el-table-column prop=""name"" label=""name"" width=""150"">
            </el-table-column>
            <el-table-column prop=""displayName"" label=""displayName"" width=""150"">
            </el-table-column>
            <el-table-column prop=""desc"" label=""描述"" min-width=""240"">
            </el-table-column>
            <el-table-column prop=""isStatic"" label=""是否常量"" width=""100"">
                <template slot-scope=""scope"">
                    <el-tag type=""success"" size=""small"" v-if=""scope.row.isStatic"">是</el-tag>
                    <el-tag type=""danger"" size=""small"" v-else>否</el-tag>
                </template>
            </el-table-column>
            <el-table-column label=""创建时间"" width=""200"">
                <template slot-scope=""scope"">
                    <i>{{scope.row.creationTime}}</i>
                </template>
            </el-table-column>
            <el-table-column label=""操作""");
                WriteLiteral(@" min-width=""155"" fixed=""right"">
                <template slot-scope=""scope"">
                    <el-button size=""mini"" type=""warning"" plain v-on:click=""edit(scope.row)"">编 辑</el-button>
                    <el-button size=""mini"" type=""danger"" v-on:click=""deleteRole(scope.row)"" v-if=""!scope.row.isStatic"">删 除</el-button>
                    <el-button plain size=""mini"" v-on:click=""openUsersForm(scope.row)"">用 户</el-button>
                </template>
            </el-table-column>
        </el-table>
        <!--分页-->
        <el-col :span=""24"" class=""toolbar"">
            <el-pagination v-on:size-change=""handleSizeChange"" v-on:current-change=""handleCurrentChange"" :current-page=""page"" :page-sizes=""[10,20,30,40,50]"" :page-size=""pageSize"" layout=""total, sizes, prev, pager, next, jumper"" :total=""total"" style=""float:right;"">
            </el-pagination>
        </el-col>
        <!--// 添加单元的弹出框-->
        <el-dialog :title=""dialogcreateorUpdateRole.title""
                   :visible.sync=""dialogcreat");
                WriteLiteral(@"eorUpdateRole.isShow""
                   size=""tiny"">
            <el-tabs ref=""tab"">
                <el-form label-width=""150px"" size=""small"">
                    <el-form-item label=""name"">
                        <el-input placeholder=""name"" v-model=""dialogcreateorUpdateRole.Role.name"" style=""width:auto;""></el-input>
                    </el-form-item>
                    <el-form-item label=""displayName"">
                        <el-input placeholder=""displayName"" v-model=""dialogcreateorUpdateRole.Role.displayName"" style=""width:auto;""></el-input>
                    </el-form-item>
                    <el-form-item label=""描述"">
                        <el-input type=""textarea"" autosize placeholder=""desc"" v-model=""dialogcreateorUpdateRole.Role.desc"" style=""width:auto;""></el-input>
                    </el-form-item>
                    <el-form-item");
                BeginWriteAttribute("label", " label=\"", 4199, "\"", 4207, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                        <el-checkbox v-model=\"dialogcreateorUpdateRole.Role.isStatic\">是否常量</el-checkbox>\r\n                    </el-form-item>\r\n");
                WriteLiteral(@"                </el-form>
            </el-tabs>
            <span slot=""footer"" class=""dialog-footer"">
                <el-button size=""small"" v-on:click=""dialogcreateorUpdateRole.isShow = false"">取 消</el-button>
                <el-button size=""small"" type=""primary"" v-on:click=""saveRole"">保 存</el-button>
            </span>
        </el-dialog>
        <el-dialog :title=""usersForm.title"" :visible.sync=""usersForm.isShow"" top=""5%"" width=""600px"">
            <el-table :data=""usersForm.list"" style=""width: 100%"" size=""mini"" v-loading=""dialogLoading"">
                <el-table-column prop=""id"" label=""Id"" width=""180"">
                </el-table-column>
                <el-table-column prop=""fullName"" label=""姓名"">
                </el-table-column>
            </el-table>
            <el-pagination small
                           v-on:current-change=""handleCurrentChangeUsrs""
                           layout=""prev, pager, next""
                           :current-page.sync=""usersForm.currentPage""
 ");
                WriteLiteral("                          :total=\"usersForm.total\">\r\n            </el-pagination>\r\n        </el-dialog>\r\n    </div>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        var Main = {
            data() {
                return {
                    /*==表格数据==*/
                    filters: {
                        searchKey: '',
                        isChanged: 0
                    },
                    total: 30,
                    page: 1,
                    currentPage: 1,
                    pageSize: 10,
                    listLoading: false,
                    dialogcreateorUpdateRole: {
                        title: """",
                        isShow: false,
                        Role: { id: 0 }
                    },
                    Roles: [],
                    checkList: [],
                    assignedRoleCount: 0,
                    dialogLoading: false,
                    usersForm: {
                        isShow: false,
                        list: [],
                        title: """",
                        id:0,
                        currentPage: 1,
                        total: 0,");
                WriteLiteral(@"
                    }
                };
            },
            created() {
                this.getRoleList();
            },
            methods: {
                //【获取角色列表】
                getRoleList: function () {
                    this.listLoading = true;
                    var _self = this;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/role/roles/get',
                        data: { key: _self.filters.searchKey },
                        success: function (data) {
                            if (data.success == true) {
                                _self.Roles = data.data;
                                _self.total = data.data.length;
                            } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
               ");
                WriteLiteral(@"         },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        },
                        complete() {
                            _self.listLoading = false;
                        }
                    });
                },
                //【查询】
                search: function () {
                    this.currentPage = 1;
   ");
                WriteLiteral(@"                 this.getRoleList();
                },
                // 只显示待提交的数据
                handleShowChanged: function (val) {
                    this.filters.isChanged = val ? 1 : 0;
                    this.getRoleList();
                },
                // 改变每页显示几条数据
                handleSizeChange(val) {
                    this.pageSize = val;
                    this.getRoleList();
                },
                //【点击第几页】
                handleCurrentChange(val) {
                    this.currentPage = val;
                    this.getRoleList();
                },
                create: function () {
                    this.dialogcreateorUpdateRole.isShow = true;
                    this.dialogcreateorUpdateRole.Role = { id: 0 };
                    this.dialogcreateorUpdateRole.title = ""角色新增"";
                },
                edit(Role) {
                    var _self = this;
                    this.dialogcreateorUpdateRole.isShow = true;
               ");
                WriteLiteral(@"     this.dialogcreateorUpdateRole.title = ""角色编辑:"" + Role.name;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/role/detail/' + Role.id,
                        success: function (data) {
                            if (data.success == true) {
                                _self.dialogcreateorUpdateRole.Role = data.data;
                            } else {
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
            ");
                WriteLiteral(@"                        message: XMLHttpRequest.responseJSON.msg
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });
                },
                deleteRole(Role) {
                    var _self = this;
                    this.$confirm('此操作将删除[' + Role.name + '], 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        $.ajax({
                            type: 'GET',
                            url: '../../rest/role/delete/' + Role.id,
                            success: function (data) {
                                if (data.success ");
                WriteLiteral(@"== true) {
                                    _self.$message({
                                        type: 'success',
                                        message: '删除成功!'
                                    });
                                    _self.getRoleList();
                                } else {
                                    _self.$message({
                                        type: 'error',
                                        message: '删除失败!'
                                    });
                                }
                            },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                if (errorThrown == ""Unauthorized"") {
                                    window.parent.MainIndex.openLoginFrom();
                                    _self.$message({
                                        type: 'error',
                                        message: XMLHttpRequest.responseJSON.m");
                WriteLiteral(@"sg
                                    });
                                } else {
                                    _self.$message({
                                        type: 'error',
                                        message: errorThrown
                                    });
                                }
                            }
                        });
                    }).catch(() => {
                        _self.$message({
                            type: 'info',
                            message: '已取消删除'
                        });
                    });
                },
                saveRole: function () {
                    this.listLoading = true;
                    var _self = this;
                    if (_self.dialogcreateorUpdateRole.Role.id > 0) {
                        //修改角色
                        $.ajax({
                            type: 'POST',
                            dataType: 'json',
                            conte");
                WriteLiteral(@"ntType: 'application/json',
                            url: '../../rest/role/update',
                            data:JSON.stringify( _self.dialogcreateorUpdateRole.Role),
                            success: function (data) {
                                if (data.success == true) {
                                    _self.dialogcreateorUpdateRole.isShow = false;
                                    _self.getRoleList();
                                } else {
                                    _self.$notify.error({
                                        title: '错误',
                                        message: data.msg
                                    });
                                }
                            },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                if (errorThrown == ""Unauthorized"") {
                                    window.parent.MainIndex.openLoginFrom();
                             ");
                WriteLiteral(@"       _self.$message({
                                        type: 'error',
                                        message: XMLHttpRequest.responseJSON.msg
                                    });
                                } else {
                                    _self.$message({
                                        type: 'error',
                                        message: errorThrown
                                    });
                                }
                            },
                            complete() {
                                _self.listLoading = false;
                            }
                        });
                    } else {
                        //新增角色
                        $.ajax({
                            type: 'POST',
                            dataType: 'json',
                            contentType: 'application/json',
                            url: '../../rest/role/create',
                            ");
                WriteLiteral(@"data: JSON.stringify(_self.dialogcreateorUpdateRole.Role),
                            success: function (data) {
                                if (data.success == true) {
                                    _self.dialogcreateorUpdateRole.isShow = false;
                                    _self.getRoleList();
                                } else {
                                    _self.$notify.error({
                                        title: '错误',
                                        message: data.msg
                                    });
                                }
                            },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                if (errorThrown == ""Unauthorized"") {
                                    window.parent.MainIndex.openLoginFrom();
                                    _self.$message({
                                        type: 'error',
                                    ");
                WriteLiteral(@"    message: XMLHttpRequest.responseJSON.msg
                                    });
                                } else {
                                    _self.$message({
                                        type: 'error',
                                        message: errorThrown
                                    });
                                }
                            },
                            complete() {
                                _self.listLoading = false;
                            }
                        });
                    }
                },
                //【打开授权用户列表弹窗】
                openUsersForm: function (row) {
                    var _self = this;
                    _self.dialogLoading = true;
                    _self.usersForm.title = row.name + ""的授权用户:"";
                    _self.usersForm.isShow = true;
                    _self.usersForm.currentPage = 1;
                    _self.usersForm.id = row.id;
                   ");
                WriteLiteral(@" _self.getGrantesUsers();
                },
                getGrantesUsers() {
                    var _self = this;
                    $.ajax({
                        type: 'GET',
                        url: '../../rest/role/granted/users',
                        data: { roleId: _self.usersForm.id, currentPage: _self.usersForm.currentPage },
                        success: function (data) {
                            if (data.success == true) {
                                _self.usersForm.list = data.data;
                                _self.usersForm.total = data.page.totalCount;
                                _self.dialogLoading = false;

                            } else {
                                _self.dialogLoading = false;
                                _self.$notify.error({
                                    title: '错误',
                                    message: data.msg
                                });
                            }
                  ");
                WriteLiteral(@"      },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            _self.dialogLoading = false;
                            if (errorThrown == ""Unauthorized"") {
                                window.parent.MainIndex.openLoginFrom();
                                _self.$message({
                                    type: 'error',
                                    message: ""未登入""
                                });
                            } else {
                                _self.$message({
                                    type: 'error',
                                    message: errorThrown
                                });
                            }
                        }
                    });

                },
                //【点击第几页】
                handleCurrentChangeUsrs(val) {
                    this.currentPage = val;
                    this.getGrantesUsers();
                },
            }
");
                WriteLiteral("        }\r\n        var Ctor = Vue.extend(Main)\r\n        new Ctor().$mount(\'#rolelist\')\r\n    </script>\r\n");
            }
            );
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
